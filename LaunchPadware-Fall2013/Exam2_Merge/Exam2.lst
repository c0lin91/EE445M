


ARM Macro Assembler    Page 1 


    1 00000000         ;*****Your name goes here*******
    2 00000000         ; -5 points if you do not add your name
    3 00000000         
    4 00000000         ;This is Exam2_Merge 
    5 00000000         ;EE319K Practice exam
    6 00000000         ;You edit this file only
    7 00000000                 AREA             Data, ALIGN=4
    8 00000000         
    9 00000000         
   10 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   11 00000000                 THUMB
   12 00000000         
   13 00000000         ;***** Init *********************
   14 00000000         ;Initialize the array to a value
   15 00000000         ;Each value is 16-bit unsigned
   16 00000000         ;Initialize the first array to 1 and the second array to
                        -1
   17 00000000         ;Inputs:  R0 is a pointer to an empty array of 16-bit un
                       signed numbers
   18 00000000         ;         R1 is the 16-bit unsigned value to be stored i
                       nto each element
   19 00000000         ;         R2 is the number of 16-bit unsigned values in 
                       the array
   20 00000000         ;         The array maybe of zero length (R2 may be zero
                       )
   21 00000000         ;Output:  none
   22 00000000         ;Error conditions: none
   23 00000000         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   24 00000000         ;Test cases
   25 00000000         ;R0=>empty array, R1=3,R2=4, result new array is {3,3,3,
                       3}
   26 00000000         ;R0=>empty array, R1=7,R2=1, result new array is {7}
   27 00000000         ;R0=>empty array, R1=5,R2=8, result new array is {5,5,5,
                       5,5,5,5,5}
   28 00000000         ;R0=>empty array, R1=0,R2=0, result is no change to empt
                       y array
   29 00000000                 EXPORT           Init
   30 00000000         Init
   31 00000000         ; put your code here
   32 00000000         
   33 00000000         Init_loop
   34 00000000 2A00            CMP              R2, #0
   35 00000002 D005            BEQ              Init_Done
   36 00000004         
   37 00000004 8001            STRH             R1, [R0]
   38 00000006 F100 0002       ADD              R0, #2
   39 0000000A F1A2 0201       SUB              R2, #1
   40 0000000E E7F7            B                Init_loop
   41 00000010         Init_Done
   42 00000010         
   43 00000010 4770            BX               LR
   44 00000012         
   45 00000012         ;***** Insert subroutine *********************
   46 00000012         ; Insert the number into the beginning of the output arr
                       ay
   47 00000012         ;   copy all the elements of the input array to the outp
                       ut array



ARM Macro Assembler    Page 2 


   48 00000012         ;Inputs : Register R0 points to input array of 16-bit un
                       signed numbers
   49 00000012         ;         Register R1 contains the length of the input a
                       rray
   50 00000012         ;         Register R2 contains number to insert
   51 00000012         ;         Register R3 is a pointer to an empty array tha
                       t should be written into
   52 00000012         ;Outputs: The array at R3 is modified
   53 00000012         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   54 00000012         ;Error conditions: none.
   55 00000012         ;test cases
   56 00000012         ;R0=>{1,2,3,4,5,6},R1=6,R2=8,result={8,1,2,3,4,5,6}
   57 00000012         ;R0=>{1},R1=1,R2=9,,result={9,1}
   58 00000012         ;R0=>{0,0,1,2},R1=4,R2=0xFE,,result={0xFE,0,0,1,2}
   59 00000012         ;R0=>{},R1=0,R2=0x45,result={0x45}
   60 00000012         
   61 00000012                 EXPORT           Insert
   62 00000012         Insert
   63 00000012         ; put your code here
   64 00000012         ;PUSH {R4} 
   65 00000012 801A            STRH             R2, [R3]    ; insert the new va
                                                            lue
   66 00000014         
   67 00000014         
   68 00000014 F103 0302       ADD              R3, #2      ; move the pointer 
                                                            to the next locatio
                                                            n
   69 00000018         
   70 00000018         Insert_Loop
   71 00000018 2900            CMP              R1, #0
   72 0000001A         ;LDRH R1, [R0] 
   73 0000001A         ;CMP R1, #9999
   74 0000001A D008            BEQ              Insert_Done
   75 0000001C         
   76 0000001C 8802            LDRH             R2, [R0]
   77 0000001E 801A            STRH             R2, [R3]
   78 00000020 F100 0002       ADD              R0, #2
   79 00000024 F103 0302       ADD              R3, #2
   80 00000028 F1A1 0101       SUB              R1, #1
   81 0000002C E7F4            B                Insert_Loop
   82 0000002E         
   83 0000002E         Insert_Done
   84 0000002E         ;POP {R4} 
   85 0000002E 4770            BX               LR
   86 00000030         
   87 00000030         ;***** Merge subroutine *********************
   88 00000030         ; Assume both arrays are initially sorted 16-bit unsigne
                       d numbers
   89 00000030         ; Merge the two input arrays into the output array
   90 00000030         ;   making the output array contain all the numbers in s
                       orted order
   91 00000030         ;Inputs : Register R0 points to the first array of 16-bi
                       t unsigned numbers
   92 00000030         ;         Register R1 points to the second array of 16-b
                       it unsigned numbers
   93 00000030         ;         Register R2 contains the number of elements in
                        the first array
   94 00000030         ;         Register R3 contains the number of elements in



ARM Macro Assembler    Page 3 


                        the second array
   95 00000030         ;         Top element on the stack is a pointer to an em
                       pty output array
   96 00000030         ;Outputs: the output array is modified
   97 00000030         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   98 00000030         ;Error conditions: none.
   99 00000030         ;test cases
  100 00000030         ;R0=>{0x8000},             R1=>{0x7000},             R2=
                       1,R3=1,output array={0x7000,0x8000}
  101 00000030         ;R0=>{0x01,0x03,0x05,0x07},R1=>{0x02,0x04,0x06,0x08},R2=
                       4,R3=4,output array={0x01,0x02,0x03,0x04,0x05,0x06,0x07,
                       0x08}
  102 00000030         ;R0=>{0x01,0x02,0x03,0x04},R1=>{0x05,0x06,0x07,0x08},R2=
                       4,R3=4,output array={0x01,0x02,0x03,0x04,0x05,0x06,0x07,
                       0x08}
  103 00000030         ;R0=>{0x01,0x02},          R1=>{0x05,0x06,0x07,0x08},R2=
                       2,R3=4,output array={0x01,0x02,0x05,0x06,0x07,0x08}
  104 00000030         ;R0=>{0x01,0x02,0x03,0x04},R1=>{0x05},               R2=
                       4,R3=1,output array={0x01,0x02,0x03,0x04,0x05}
  105 00000030         ;R0=>{0x01,0x02,0x03,0x04},R1=>{},                   R2=
                       4,R3=0,output array={0x01,0x02,0x03,0x04}
  106 00000030         ;R0=>{},R1=>{},                                      R2=
                       0,R3=0,output array={} (no change to output array)
  107 00000030                 EXPORT           Merge
  108 00000030         Merge
  109 00000030         
  110 00000030         ; put your code here
  111 00000030 B410            PUSH             {R4}
  112 00000032         
  113 00000032 9C01            LDR              R4, [SP, #4] ; R4 is our pointe
                                                            r to the output arr
                                                            ay
  114 00000034 B460            PUSH             {R5, R6}
  115 00000036         
  116 00000036         Merge_loop
  117 00000036 2A00            CMP              R2, #0
  118 00000038 D015            BEQ              First_Empty
  119 0000003A         
  120 0000003A 2B00            CMP              R3, #0
  121 0000003C D01E            BEQ              Second_Empty
  122 0000003E         
  123 0000003E         ; neither one of them is empty. Lets compare 
  124 0000003E 8805            LDRH             R5, [R0]
  125 00000040 880E            LDRH             R6, [R1]
  126 00000042 42B5            CMP              R5, R6
  127 00000044 D807            BHI              High        ; R5 > R6? 
  128 00000046         
  129 00000046 8025            STRH             R5, [R4]
  130 00000048 F104 0402       ADD              R4, #2
  131 0000004C F100 0002       ADD              R0, #2
  132 00000050 F1A2 0201       SUB              R2, #1
  133 00000054 E7EF            B                Merge_loop
  134 00000056         
  135 00000056         
  136 00000056         High                                 ; R6 < R5... So, st
                                                            ore R6 in output ar
                                                            ray
  137 00000056 8026            STRH             R6, [R4]



ARM Macro Assembler    Page 4 


  138 00000058 F104 0402       ADD              R4, #2
  139 0000005C F101 0102       ADD              R1, #2
  140 00000060 F1A3 0301       SUB              R3, #1
  141 00000064 E7E7            B                Merge_loop
  142 00000066         
  143 00000066         First_Empty
  144 00000066         ; is the second one also empty?
  145 00000066 2B00            CMP              R3, #0
  146 00000068 D010            BEQ              Merge_Done
  147 0000006A         
  148 0000006A 880E            LDRH             R6, [R1]
  149 0000006C 8026            STRH             R6, [R4]
  150 0000006E F104 0402       ADD              R4, #2
  151 00000072 F101 0102       ADD              R1, #2
  152 00000076 F1A3 0301       SUB              R3, #1
  153 0000007A E7F4            B                First_Empty
  154 0000007C         
  155 0000007C         Second_Empty
  156 0000007C         ; copy the first array because we know it's not empty
  157 0000007C 8805            LDRH             R5, [R0]
  158 0000007E 8025            STRH             R5, [R4]
  159 00000080 F104 0402       ADD              R4, #2
  160 00000084 F100 0002       ADD              R0, #2
  161 00000088 3A01            SUBS             R2, #1
  162 0000008A         ;CMP R2, #0 
  163 0000008A D1F7            BNE              Second_Empty
  164 0000008C         
  165 0000008C         Merge_Done
  166 0000008C         
  167 0000008C BC60            POP              {R5, R6}
  168 0000008E BC10            POP              {R4}
  169 00000090 4770            BX               LR
  170 00000092         
  171 00000092 00 00           ALIGN
  172 00000094                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\exam2.
d -o.\exam2.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\exam2.lst Exam2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Data 00000000

Symbol: Data
   Definitions
      At line 7 in file Exam2.s
   Uses
      None
Comment: Data unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 10 in file Exam2.s
   Uses
      None
Comment: .text unused
First_Empty 00000066

Symbol: First_Empty
   Definitions
      At line 143 in file Exam2.s
   Uses
      At line 118 in file Exam2.s
      At line 153 in file Exam2.s

High 00000056

Symbol: High
   Definitions
      At line 136 in file Exam2.s
   Uses
      At line 127 in file Exam2.s
Comment: High used once
Init 00000000

Symbol: Init
   Definitions
      At line 30 in file Exam2.s
   Uses
      At line 29 in file Exam2.s
Comment: Init used once
Init_Done 00000010

Symbol: Init_Done
   Definitions
      At line 41 in file Exam2.s
   Uses
      At line 35 in file Exam2.s
Comment: Init_Done used once
Init_loop 00000000

Symbol: Init_loop
   Definitions
      At line 33 in file Exam2.s
   Uses
      At line 40 in file Exam2.s
Comment: Init_loop used once
Insert 00000012

Symbol: Insert
   Definitions
      At line 62 in file Exam2.s
   Uses
      At line 61 in file Exam2.s
Comment: Insert used once
Insert_Done 0000002E




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: Insert_Done
   Definitions
      At line 83 in file Exam2.s
   Uses
      At line 74 in file Exam2.s
Comment: Insert_Done used once
Insert_Loop 00000018

Symbol: Insert_Loop
   Definitions
      At line 70 in file Exam2.s
   Uses
      At line 81 in file Exam2.s
Comment: Insert_Loop used once
Merge 00000030

Symbol: Merge
   Definitions
      At line 108 in file Exam2.s
   Uses
      At line 107 in file Exam2.s
Comment: Merge used once
Merge_Done 0000008C

Symbol: Merge_Done
   Definitions
      At line 165 in file Exam2.s
   Uses
      At line 146 in file Exam2.s
Comment: Merge_Done used once
Merge_loop 00000036

Symbol: Merge_loop
   Definitions
      At line 116 in file Exam2.s
   Uses
      At line 133 in file Exam2.s
      At line 141 in file Exam2.s

Second_Empty 0000007C

Symbol: Second_Empty
   Definitions
      At line 155 in file Exam2.s
   Uses
      At line 121 in file Exam2.s
      At line 163 in file Exam2.s

13 symbols
345 symbols in table

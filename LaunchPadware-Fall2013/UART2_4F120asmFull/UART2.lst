


ARM Macro Assembler    Page 1 


    1 00000000         ; UART2.s
    2 00000000         ; Runs on LM4F120
    3 00000000         ; Use UART0 to implement bidirectional data transfer to 
                       and from a
    4 00000000         ; computer running HyperTerminal.  This time, interrupts
                        and FIFOs
    5 00000000         ; are used.
    6 00000000         ; This file is named "UART2" because it is the second UA
                       RT example.
    7 00000000         ; It is not related to the UART2 module on the microcont
                       roller.
    8 00000000         ; Daniel Valvano
    9 00000000         ; May 2, 2013
   10 00000000         ; Modified by EE345L students Charlie Gough && Matt Hawk
                       
   11 00000000         ; Modified by EE345M students Agustinus Darmawan && Ming
                       jie Qiu
   12 00000000         
   13 00000000         ;  This example accompanies the book
   14 00000000         ;  "Embedded Systems: Real Time Interfacing to Arm Corte
                       x M Microcontrollers",
   15 00000000         ;  ISBN: 978-1463590154, Jonathan Valvano, copyright (c)
                        2013
   16 00000000         ;  Program 5.11 Section 5.6, Program 3.10
   17 00000000         ;
   18 00000000         ;Copyright 2013 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   19 00000000         ;   You may use, edit, run or distribute this file
   20 00000000         ;   as long as the above copyright notice remains
   21 00000000         ;THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHET
                       HER EXPRESS, IMPLIED
   22 00000000         ;OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WA
                       RRANTIES OF
   23 00000000         ;MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE AP
                       PLY TO THIS SOFTWARE.
   24 00000000         ;VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR 
                       SPECIAL, INCIDENTAL,
   25 00000000         ;OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   26 00000000         ;For more information about my classes, my research, and
                        my books, see
   27 00000000         ;http://users.ece.utexas.edu/~valvano/
   28 00000000         
   29 00000000         ; U0Rx (VCP receive) connected to PA0
   30 00000000         ; U0Tx (VCP transmit) connected to PA1
   31 00000000         
   32 00000000 00000020 
                       NVIC_EN0_INT5
                               EQU              0x00000020  ; Interrupt 5 enabl
                                                            e
   33 00000000 E000E100 
                       NVIC_EN0_R
                               EQU              0xE000E100  ; IRQ 0 to 31 Set E
                                                            nable Register
   34 00000000 E000E404 
                       NVIC_PRI1_R
                               EQU              0xE000E404  ; IRQ 4 to 7 Priori
                                                            ty Register
   35 00000000 40004420 
                       GPIO_PORTA_AFSEL_R



ARM Macro Assembler    Page 2 


                               EQU              0x40004420
   36 00000000 4000451C 
                       GPIO_PORTA_DEN_R
                               EQU              0x4000451C
   37 00000000 40004528 
                       GPIO_PORTA_AMSEL_R
                               EQU              0x40004528
   38 00000000 4000452C 
                       GPIO_PORTA_PCTL_R
                               EQU              0x4000452C
   39 00000000 4000C000 
                       UART0_DR_R
                               EQU              0x4000C000
   40 00000000 4000C018 
                       UART0_FR_R
                               EQU              0x4000C018
   41 00000000 4000C024 
                       UART0_IBRD_R
                               EQU              0x4000C024
   42 00000000 4000C028 
                       UART0_FBRD_R
                               EQU              0x4000C028
   43 00000000 4000C02C 
                       UART0_LCRH_R
                               EQU              0x4000C02C
   44 00000000 4000C030 
                       UART0_CTL_R
                               EQU              0x4000C030
   45 00000000 4000C034 
                       UART0_IFLS_R
                               EQU              0x4000C034
   46 00000000 4000C038 
                       UART0_IM_R
                               EQU              0x4000C038
   47 00000000 4000C03C 
                       UART0_RIS_R
                               EQU              0x4000C03C
   48 00000000 4000C044 
                       UART0_ICR_R
                               EQU              0x4000C044
   49 00000000 00000040 
                       UART_FR_RXFF
                               EQU              0x00000040  ; UART Receive FIFO
                                                             Full
   50 00000000 00000020 
                       UART_FR_TXFF
                               EQU              0x00000020  ; UART Transmit FIF
                                                            O Full
   51 00000000 00000010 
                       UART_FR_RXFE
                               EQU              0x00000010  ; UART Receive FIFO
                                                             Empty
   52 00000000 00000060 
                       UART_LCRH_WLEN_8
                               EQU              0x00000060  ; 8 bit word length
                                                            
   53 00000000 00000010 
                       UART_LCRH_FEN
                               EQU              0x00000010  ; UART Enable FIFOs



ARM Macro Assembler    Page 3 


                                                            
   54 00000000 00000001 
                       UART_CTL_UARTEN
                               EQU              0x00000001  ; UART Enable
   55 00000000 00000000 
                       UART_IFLS_RX1_8
                               EQU              0x00000000  ; RX FIFO >= 1/8 fu
                                                            ll
   56 00000000 00000000 
                       UART_IFLS_TX1_8
                               EQU              0x00000000  ; TX FIFO <= 1/8 fu
                                                            ll
   57 00000000 00000040 
                       UART_IM_RTIM
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Interrupt
   58 00000000         ; Mask
   59 00000000 00000020 
                       UART_IM_TXIM
                               EQU              0x00000020  ; UART Transmit Int
                                                            errupt Mask
   60 00000000 00000010 
                       UART_IM_RXIM
                               EQU              0x00000010  ; UART Receive Inte
                                                            rrupt Mask
   61 00000000 00000040 
                       UART_RIS_RTRIS
                               EQU              0x00000040  ; UART Receive Time
                                                            -Out Raw
   62 00000000         ; Interrupt Status
   63 00000000 00000020 
                       UART_RIS_TXRIS
                               EQU              0x00000020  ; UART Transmit Raw
                                                             Interrupt
   64 00000000         ; Status
   65 00000000 00000010 
                       UART_RIS_RXRIS
                               EQU              0x00000010  ; UART Receive Raw 
                                                            Interrupt
   66 00000000         ; Status
   67 00000000 00000040 
                       UART_ICR_RTIC
                               EQU              0x00000040  ; Receive Time-Out 
                                                            Interrupt Clear
   68 00000000 00000020 
                       UART_ICR_TXIC
                               EQU              0x00000020  ; Transmit Interrup
                                                            t Clear
   69 00000000 00000010 
                       UART_ICR_RXIC
                               EQU              0x00000010  ; Receive Interrupt
                                                             Clear
   70 00000000 400FE104 
                       SYSCTL_RCGC1_R
                               EQU              0x400FE104
   71 00000000 400FE108 
                       SYSCTL_RCGC2_R
                               EQU              0x400FE108
   72 00000000 00000001 



ARM Macro Assembler    Page 4 


                       SYSCTL_RCGC1_UART0
                               EQU              0x00000001  ; UART0 Clock Gatin
                                                            g Control
   73 00000000 00000001 
                       SYSCTL_RCGC2_GPIOA
                               EQU              0x00000001  ; port A Clock Gati
                                                            ng Control
   74 00000000         
   75 00000000                 IMPORT           DisableInterrupts ; Disable int
                                                            errupts
   76 00000000                 IMPORT           EnableInterrupts 
                                                            ; Enable interrupts
                                                            
   77 00000000                 IMPORT           StartCritical ; previous I bit,
                                                             disable interrupts
                                                            
   78 00000000                 IMPORT           EndCritical ; restore I bit to 
                                                            previous value
   79 00000000                 IMPORT           WaitForInterrupt 
                                                            ; low power mode
   80 00000000         
   81 00000000         ; properties from FIFO.c
   82 00000000         ; size of the FIFOs (must be power of 2)
   83 00000000 00000010 
                       FIFOSIZE
                               EQU              16          ; (copy this value 
                                                            from both places in
                                                             FIFO.s)
   84 00000000 00000001 
                       FIFOSUCCESS
                               EQU              1           ; return value on s
                                                            uccess
   85 00000000 00000000 
                       FIFOFAIL
                               EQU              0           ; return value on f
                                                            ailure
   86 00000000         
   87 00000000         ; functions from FIFO.s
   88 00000000                 IMPORT           TxFifo_Init
   89 00000000                 IMPORT           TxFifo_Put
   90 00000000                 IMPORT           TxFifo_Get
   91 00000000                 IMPORT           TxFifo_Size
   92 00000000                 IMPORT           RxFifo_Init
   93 00000000                 IMPORT           RxFifo_Put
   94 00000000                 IMPORT           RxFifo_Get
   95 00000000                 IMPORT           RxFifo_Size
   96 00000000         
   97 00000000         ; standard ASCII symbols
   98 00000000 0000000D 
                       CR      EQU              0x0D
   99 00000000 0000000A 
                       LF      EQU              0x0A
  100 00000000 00000008 
                       BS      EQU              0x08
  101 00000000 0000001B 
                       ESC     EQU              0x1B
  102 00000000 00000020 
                       SPA     EQU              0x20
  103 00000000 0000007F 



ARM Macro Assembler    Page 5 


                       DEL     EQU              0x7F
  104 00000000         
  105 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
  106 00000000                 THUMB
  107 00000000                 EXPORT           UART_Init
  108 00000000                 EXPORT           UART_InChar
  109 00000000                 EXPORT           UART_OutChar
  110 00000000                 EXPORT           UART0_Handler
  111 00000000                 EXPORT           UART_OutString
  112 00000000                 EXPORT           UART_InUDec
  113 00000000                 EXPORT           UART_OutUDec
  114 00000000                 EXPORT           UART_InUHex
  115 00000000                 EXPORT           UART_OutUHex
  116 00000000                 EXPORT           UART_InString
  117 00000000         ; require C function calls to preserve the 8-byte alignm
                       ent of 8-byte data objects
  118 00000000                 PRESERVE8
  119 00000000         
  120 00000000         ;------------UART_Init------------
  121 00000000         ; Initialize UART0
  122 00000000         ; Baud rate is 115200 bits/sec
  123 00000000         ; Input: none
  124 00000000         ; Output: none
  125 00000000         ; Modifies: R0, R1
  126 00000000         ; Assumes: 50 MHz system clock
  127 00000000         UART_Init
  128 00000000 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  129 00000002 F7FF FFFE       BL               DisableInterrupts ; disable all
                                                             interrupts (critic
                                                            al section)
  130 00000006         ; activate clock for UART0
  131 00000006 49D4            LDR              R1, =SYSCTL_RCGC1_R ; R1 = &SYS
                                                            CTL_RCGC1_R
  132 00000008 6808            LDR              R0, [R1]    ; R0 = [R1]
  133 0000000A F040 0001       ORR              R0, R0, #SYSCTL_RCGC1_UART0 ; R
                                                            0 = R0|SYSCTL_RCGC1
                                                            _UART0
  134 0000000E 6008            STR              R0, [R1]    ; [R1] = R0
  135 00000010         ; activate clock for port A
  136 00000010 49D2            LDR              R1, =SYSCTL_RCGC2_R ; R1 = &SYS
                                                            CTL_RCGC2_R
  137 00000012 6808            LDR              R0, [R1]    ; R0 = [R1]
  138 00000014 F040 0001       ORR              R0, R0, #SYSCTL_RCGC2_GPIOA ; R
                                                            0 = R0|SYSCTL_RCGC2
                                                            _GPIOA
  139 00000018 6008            STR              R0, [R1]    ; [R1] = R0
  140 0000001A         ; initialize empty FIFOs
  141 0000001A F7FF FFFE       BL               RxFifo_Init
  142 0000001E F7FF FFFE       BL               TxFifo_Init
  143 00000022         ; disable UART
  144 00000022 49CF            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R
                                                            
  145 00000024 6808            LDR              R0, [R1]    ; R0 = [R1]
  146 00000026 F020 0001       BIC              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0&~UART_CTL_UARTE
                                                            N (disable UART)



ARM Macro Assembler    Page 6 


  147 0000002A 6008            STR              R0, [R1]    ; [R1] = R0
  148 0000002C         ; set the baud rate (equations on p845 of datasheet)
  149 0000002C 49CD            LDR              R1, =UART0_IBRD_R ; R1 = &UART0
                                                            _IBRD_R
  150 0000002E F04F 001B       MOV              R0, #27     ; R0 = IBRD = int(5
                                                            0,000,000 / (16 * 1
                                                            15,200)) = int(27.1
                                                            267)
  151 00000032 6008            STR              R0, [R1]    ; [R1] = R0
  152 00000034 49CC            LDR              R1, =UART0_FBRD_R ; R1 = &UART0
                                                            _FBRD_R
  153 00000036 F04F 0008       MOV              R0, #8      ; R0 = FBRD = int(0
                                                            .1267 * 64 + 0.5) =
                                                             8
  154 0000003A 6008            STR              R0, [R1]    ; [R1] = R0
  155 0000003C         ; configure Line Control Register settings
  156 0000003C 49CB            LDR              R1, =UART0_LCRH_R ; R1 = &UART0
                                                            _LCRH_R
  157 0000003E 6808            LDR              R0, [R1]    ; R0 = [R1]
  158 00000040 F020 00FF       BIC              R0, R0, #0xFF ; R0 = R0&~0xFF (
                                                            clear all fields)
  159 00000044         ; 8 bit word length, no parity bits, one stop bit, FIFOs
                       
  160 00000044 F100 0070       ADD              R0, R0, #(UART_LCRH_WLEN_8+UART
_LCRH_FEN)
  161 00000048 6008            STR              R0, [R1]    ; [R1] = R0
  162 0000004A         ; configure Interrupt FIFO Level Select Register setting
                       s
  163 0000004A 49C9            LDR              R1, =UART0_IFLS_R ; R1 = &UART0
                                                            _IFLS_R
  164 0000004C 6808            LDR              R0, [R1]    ; R0 = [R1]
  165 0000004E F020 003F       BIC              R0, R0, #0x3F ; R0 = R0&~0x3F (
                                                            clear TX and RX int
                                                            errupt FIFO level f
                                                            ields)
  166 00000052         ; configure interrupt for TX FIFO <= 1/8 full
  167 00000052         ; configure interrupt for RX FIFO >= 1/8 full
  168 00000052 F100 0000       ADD              R0, R0, #(UART_IFLS_TX1_8+UART_
IFLS_RX1_8)
  169 00000056 6008            STR              R0, [R1]    ; [R1] = R0
  170 00000058         ; enable interrupts to be requested upon certain conditi
                       ons
  171 00000058         ; TX FIFO interrupt: when TX FIFO <= 2 elements (<= 1/8 
                       full, configured above)
  172 00000058         ; RX FIFO interrupt; when RX FIFO >= 2 elements (>= 1/8 
                       full, configured above)
  173 00000058         ; RX time-out interrupt: receive FIFO not empty and no m
                       ore data received in next 32-bit timeframe
  174 00000058         ;               (this causes an interrupt after each key
                       stroke, rather than every other keystroke)
  175 00000058 49C6            LDR              R1, =UART0_IM_R 
                                                            ; R1 = &UART0_IM_R
  176 0000005A 6808            LDR              R0, [R1]    ; R0 = [R1]
  177 0000005C         ; enable TX and RX FIFO interrupts and RX time-out inter
                       rupt
  178 0000005C F040 0070       ORR              R0, R0, #(UART_IM_RXIM+UART_IM_
TXIM+UART_IM_RTIM)
  179 00000060 6008            STR              R0, [R1]    ; [R1] = R0
  180 00000062         ; enable UART



ARM Macro Assembler    Page 7 


  181 00000062 49BF            LDR              R1, =UART0_CTL_R 
                                                            ; R1 = &UART0_CTL_R
                                                            
  182 00000064 6808            LDR              R0, [R1]    ; R0 = [R1]
  183 00000066 F040 0001       ORR              R0, R0, #UART_CTL_UARTEN ; R0 =
                                                             R0|UART_CTL_UARTEN
                                                             (enable UART)
  184 0000006A 6008            STR              R0, [R1]    ; [R1] = R0
  185 0000006C         ; enable alternate function
  186 0000006C 49C2            LDR              R1, =GPIO_PORTA_AFSEL_R ; R1 = 
                                                            &GPIO_PORTA_AFSEL_R
                                                            
  187 0000006E 6808            LDR              R0, [R1]    ; R0 = [R1]
  188 00000070 F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable alt funct on 
                                                            PA1-0)
  189 00000074 6008            STR              R0, [R1]    ; [R1] = R0
  190 00000076         ; enable digital port
  191 00000076 49C1            LDR              R1, =GPIO_PORTA_DEN_R ; R1 = &G
                                                            PIO_PORTA_DEN_R
  192 00000078 6808            LDR              R0, [R1]    ; R0 = [R1]
  193 0000007A F040 0003       ORR              R0, R0, #0x03 ; R0 = R0|0x03 (e
                                                            nable digital I/O o
                                                            n PA1-0)
  194 0000007E 6008            STR              R0, [R1]    ; [R1] = R0
  195 00000080         ; configure as UART
  196 00000080 49BF            LDR              R1, =GPIO_PORTA_PCTL_R ; R1 = &
                                                            GPIO_PORTA_PCTL_R
  197 00000082 6808            LDR              R0, [R1]    ; R0 = [R1]
  198 00000084 F020 00FF       BIC              R0, R0, #0x000000FF ; R0 = R0&~
                                                            0x000000FF (clear p
                                                            ort control field f
                                                            or PA1-0)
  199 00000088 F100 0011       ADD              R0, R0, #0x00000011 ; R0 = R0+0
                                                            x00000011 (configur
                                                            e PA1-0 as UART)
  200 0000008C 6008            STR              R0, [R1]    ; [R1] = R0
  201 0000008E         ; disable analog functionality
  202 0000008E 49BD            LDR              R1, =GPIO_PORTA_AMSEL_R ; R1 = 
                                                            &GPIO_PORTA_AMSEL_R
                                                            
  203 00000090 F04F 0000       MOV              R0, #0      ; R0 = 0 (disable a
                                                            nalog functionality
                                                             on PA)
  204 00000094 6008            STR              R0, [R1]    ; [R1] = R0
  205 00000096         ; set the priority of the UART interrupt
  206 00000096 49BC            LDR              R1, =NVIC_PRI1_R 
                                                            ; R1 = &NVIC_PRI1_R
                                                            
  207 00000098 6808            LDR              R0, [R1]    ; R0 = [R1]
  208 0000009A F420 407F       BIC              R0, R0, #0x0000FF00 ; R0 = R0&~
                                                            0xFFFF00FF (clear N
                                                            VIC priority field 
                                                            for UART0 interrupt
                                                            )
  209 0000009E F500 4080       ADD              R0, R0, #0x00004000 ; R0 = R0+0
                                                            x00004000 (UART0 = 
                                                            priority 2; stored 
                                                            in bits 13-15)



ARM Macro Assembler    Page 8 


  210 000000A2 6008            STR              R0, [R1]    ; [R1] = R0
  211 000000A4         ; enable interrupt 5 in NVIC
  212 000000A4 49B9            LDR              R1, =NVIC_EN0_R 
                                                            ; R1 = &NVIC_EN0_R
  213 000000A6 F04F 0020       LDR              R0, =NVIC_EN0_INT5 ; R0 = NVIC_
                                                            EN0_INT5 (zeros wri
                                                            tten to enable regi
                                                            ster have no effect
                                                            )
  214 000000AA 6008            STR              R0, [R1]    ; [R1] = R0
  215 000000AC F7FF FFFE       BL               EnableInterrupts ; enable all i
                                                            nterrupts (end of c
                                                            ritical section)
  216 000000B0 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  217 000000B2         
  218 000000B2         ; private helper subroutine
  219 000000B2         ; copy from hardware RX FIFO to software RX FIFO
  220 000000B2         ; stop when hardware RX FIFO is empty or software RX FIF
                       O is full
  221 000000B2         ; Modifies: R0, R1
  222 000000B2         copyHardwareToSoftware
  223 000000B2 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  224 000000B4         h2sloop
  225 000000B4         ; repeat the loop while (hardware receive FIFO not empty
                       ) and (software receive FIFO not full)
  226 000000B4 49B6            LDR              R1, =UART0_FR_R 
                                                            ; R1 = &UART0_FR_R
  227 000000B6 6808            LDR              R0, [R1]    ; R0 = [R1]
  228 000000B8 F000 0010       AND              R0, R0, #UART_FR_RXFE ; R0 = R0
                                                            &UART_FR_RXFE
  229 000000BC 2810            CMP              R0, #UART_FR_RXFE ; is R0 (UART
                                                            0_FR_R&UART_FR_RXFE
                                                            ) == UART_FR_RXFE? 
                                                            (is hardware receiv
                                                            e FIFO empty?)
  230 000000BE D008            BEQ              h2sdone     ; if so, skip to 'h
                                                            2sdone'
  231 000000C0 F7FF FFFE       BL               RxFifo_Size
  232 000000C4 280F            CMP              R0, #(FIFOSIZE - 1) ; is R0 (Rx
                                                            Fifo_Size()) == (FI
                                                            FOSIZE - 1)? (is so
                                                            ftware receive FIFO
                                                             full?)
  233 000000C6 D004            BEQ              h2sdone     ; if so, skip to 'h
                                                            2sdone'
  234 000000C8         ; read a character from the hardware FIFO
  235 000000C8 49B2            LDR              R1, =UART0_DR_R 
                                                            ; R1 = &UART0_DR_R
  236 000000CA 6808            LDR              R0, [R1]    ; R0 = [R1]
  237 000000CC         ; store R0 (UART0_DR_R) in software receive FIFO
  238 000000CC F7FF FFFE       BL               RxFifo_Put
  239 000000D0 E7F0            B                h2sloop     ; unconditional bra
                                                            nch to 'h2sloop'
  240 000000D2         h2sdone
  241 000000D2 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC



ARM Macro Assembler    Page 9 


                                                             (return)
  242 000000D4         
  243 000000D4         ; private helper subroutine
  244 000000D4         ; copy from software TX FIFO to hardware TX FIFO
  245 000000D4         ; stop when software TX FIFO is empty or hardware TX FIF
                       O is full
  246 000000D4         copySoftwareToHardware
  247 000000D4 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  248 000000D6         s2hloop
  249 000000D6         ; repeat the loop while (hardware transmit FIFO not full
                       ) and (software transmit FIFO not empty)
  250 000000D6 49AE            LDR              R1, =UART0_FR_R 
                                                            ; R1 = &UART0_FR_R
  251 000000D8 6808            LDR              R0, [R1]    ; R0 = [R1]
  252 000000DA F000 0020       AND              R0, R0, #UART_FR_TXFF ; R0 = R0
                                                            &UART_FR_TXFF
  253 000000DE 2820            CMP              R0, #UART_FR_TXFF ; is R0 (UART
                                                            0_FR_R&UART_FR_TXFF
                                                            ) == UART_FR_TXFF? 
                                                            (is hardware transm
                                                            it FIFO full?)
  254 000000E0 D00B            BEQ              s2hdone     ; if so, skip to 's
                                                            2hdone'
  255 000000E2 F7FF FFFE       BL               TxFifo_Size
  256 000000E6 2800            CMP              R0, #0      ; is R0 (TxFifo_Siz
                                                            e()) == 0? (is soft
                                                            ware transmit FIFO 
                                                            empty?)
  257 000000E8 D007            BEQ              s2hdone     ; if so, skip to 's
                                                            2hdone'
  258 000000EA         ; read a character from the software FIFO
  259 000000EA B401            PUSH             {R0}        ; allocate local va
                                                            riable
  260 000000EC 4668            MOV              R0, SP      ; R0 = SP (R0 point
                                                            s to local variable
                                                            )
  261 000000EE F7FF FFFE       BL               TxFifo_Get  ; get from software
                                                             transmit FIFO into
                                                             pointer R0
  262 000000F2 BC01            POP              {R0}        ; pop data into R0
  263 000000F4         ; store R0 (data from TxFifo_Get()) in hardware transmit
                        FIFO
  264 000000F4 49A7            LDR              R1, =UART0_DR_R 
                                                            ; R1 = &UART0_DR_R
  265 000000F6 6008            STR              R0, [R1]    ; [R1] = R0
  266 000000F8 E7ED            B                s2hloop     ; unconditional bra
                                                            nch to 'h2sloop'
  267 000000FA         s2hdone
  268 000000FA BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  269 000000FC         
  270 000000FC         ;------------UART_InChar------------
  271 000000FC         ; input ASCII character from UART
  272 000000FC         ; spin if RxFifo is empty
  273 000000FC         ; Input: none
  274 000000FC         ; Output: R0  character in from UART
  275 000000FC         ; Very Important: The UART0 interrupt handler automatica



ARM Macro Assembler    Page 10 


                       lly
  276 000000FC         ;  empties the hardware receive FIFO into the software F
                       IFO as
  277 000000FC         ;  the hardware gets data.  If the UART0 interrupt is
  278 000000FC         ;  disabled, the software receive FIFO may become empty,
                        and
  279 000000FC         ;  this function will stall forever.
  280 000000FC         ;  Ensure that the UART0 module is initialized and its
  281 000000FC         ;  interrupt is enabled before calling this function.  D
                       o not
  282 000000FC         ;  use UART I/O functions within a critical section of y
                       our
  283 000000FC         ;  main program.
  284 000000FC         UART_InChar
  285 000000FC F04F 0000       MOV              R0, #0      ; initialize local 
                                                            variable
  286 00000100 B501            PUSH             {R0, LR}    ; save current valu
                                                            e of LR and allocat
                                                            e local variable
  287 00000102         inCharLoop
  288 00000102 4668            MOV              R0, SP      ; R0 = SP (R0 point
                                                            s to local variable
                                                            )
  289 00000104 F7FF FFFE       BL               RxFifo_Get  ; get from software
                                                             receive FIFO into 
                                                            pointer R0
  290 00000108 2800            CMP              R0, #FIFOFAIL ; is R0 (RxFifo_G
                                                            et()) == FIFOFAIL (
                                                            value returned when
                                                             FIFO empty)?
  291 0000010A D0FA            BEQ              inCharLoop  ; if so, skip to 'i
                                                            nCharLoop' (spin un
                                                            til receive a chara
                                                            cter)
  292 0000010C BD01            POP              {R0, PC}    ; pop data into R0 
                                                            and restore LR into
                                                             PC (return)
  293 0000010E         
  294 0000010E         ;------------UART_OutChar------------
  295 0000010E         ; output ASCII character to UART
  296 0000010E         ; spin if TxFifo is full
  297 0000010E         ; Input: R0  character out to UART
  298 0000010E         ; Output: none
  299 0000010E         ; Modifies: R0, R1
  300 0000010E         ; Very Important: The UART0 interrupt handler automatica
                       lly
  301 0000010E         ;  empties the software transmit FIFO into the hardware 
                       FIFO as
  302 0000010E         ;  the hardware sends data.  If the UART0 interrupt is
  303 0000010E         ;  disabled, the software transmit FIFO may become full,
                        and
  304 0000010E         ;  this function will stall forever.
  305 0000010E         ;  Ensure that the UART0 module is initialized and its
  306 0000010E         ;  interrupt is enabled before calling this function.  D
                       o not
  307 0000010E         ;  use UART I/O functions within a critical section of y
                       our
  308 0000010E         ;  main program.
  309 0000010E         UART_OutChar



ARM Macro Assembler    Page 11 


  310 0000010E B510            PUSH             {R4, LR}    ; save current valu
                                                            e of R4 and LR
  311 00000110 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             output character)
  312 00000112         outCharLoop
  313 00000112 4620            MOV              R0, R4      ; R0 = R4 (recall t
                                                            he output character
                                                            )
  314 00000114 F7FF FFFE       BL               TxFifo_Put  ; store R0 (output 
                                                            character) in softw
                                                            are transmit FIFO
  315 00000118 2800            CMP              R0, #FIFOFAIL ; is R0 (TxFifo_P
                                                            ut()) == FIFOFAIL (
                                                            value returned when
                                                             FIFO full)?
  316 0000011A D0FA            BEQ              outCharLoop ; if so, skip to 'o
                                                            utCharLoop' (spin u
                                                            ntil space in softw
                                                            are transmit FIFO)
  317 0000011C 4C95            LDR              R4, =UART0_IM_R 
                                                            ; R4 = &UART0_IM_R
  318 0000011E 6820            LDR              R0, [R4]    ; R0 = [R4]
  319 00000120 F020 0020       BIC              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            &~UART_IM_TXIM (dis
                                                            able TX FIFO interr
                                                            upt)
  320 00000124 6020            STR              R0, [R4]    ; [R4] = R0
  321 00000126 F7FF FFD5       BL               copySoftwareToHardware ; privat
                                                            e helper subroutine
                                                            
  322 0000012A 6820            LDR              R0, [R4]    ; R0 = [R4]
  323 0000012C F040 0020       ORR              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            |UART_IM_TXIM (enab
                                                            le TX FIFO interrup
                                                            t)
  324 00000130 6020            STR              R0, [R4]    ; [R4] = R0
  325 00000132 BD10            POP              {R4, PC}    ; restore previous 
                                                            value of R4 into R4
                                                             and LR into PC (re
                                                            turn)
  326 00000134         
  327 00000134         ;------------UART0_Handler------------
  328 00000134         ; at least one of three things has happened:
  329 00000134         ; hardware TX FIFO goes from 3 to 2 or less items
  330 00000134         ; hardware RX FIFO goes from 1 to 2 or more items
  331 00000134         ; UART receiver has timed out
  332 00000134         UART0_Handler
  333 00000134 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  334 00000136         ; check the flags to determine which interrupt condition
                        occurred
  335 00000136         handlerCheck0
  336 00000136 4998            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  337 00000138 6808            LDR              R0, [R1]    ; R0 = [R1]
  338 0000013A F000 0020       AND              R0, R0, #UART_RIS_TXRIS ; R0 = 
                                                            R0&UART_RIS_TXRIS
  339 0000013E 2820            CMP              R0, #UART_RIS_TXRIS ; is R0 (UA



ARM Macro Assembler    Page 12 


                                                            RT0_RIS_R&UART_RIS_
                                                            TXRIS) == UART_RIS_
                                                            TXRIS? (does hardwa
                                                            re TX FIFO have <= 
                                                            2 items?)
  340 00000140 D10E            BNE              handlerCheck1 ; if not, skip to
                                                             'handlerCheck1' an
                                                            d check the next fl
                                                            ag
  341 00000142         ; acknowledge TX FIFO interrupt
  342 00000142 4996            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  343 00000144 F04F 0020       LDR              R0, =UART_ICR_TXIC ; R0 = UART_
                                                            ICR_TXIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  344 00000148 6008            STR              R0, [R1]    ; [R1] = R0
  345 0000014A         ; copy from software TX FIFO to hardware TX FIFO
  346 0000014A F7FF FFC3       BL               copySoftwareToHardware ; privat
                                                            e helper subroutine
                                                            
  347 0000014E         ; if the software transmit FIFO is now empty, disable TX
                        FIFO interrupt
  348 0000014E         ; UART_OutChar() will re-enable the TX FIFO interrupt wh
                       en it is needed
  349 0000014E F7FF FFFE       BL               TxFifo_Size
  350 00000152 2800            CMP              R0, #0      ; is R0 (TxFifo_Siz
                                                            e()) == 0? (is soft
                                                            ware transmit FIFO 
                                                            empty?)
  351 00000154 D104            BNE              handlerCheck1 ; if not, skip to
                                                             'handlerCheck1'
  352 00000156 4987            LDR              R1, =UART0_IM_R 
                                                            ; R1 = &UART0_IM_R
  353 00000158 6808            LDR              R0, [R1]    ; R0 = [R1]
  354 0000015A F020 0020       BIC              R0, R0, #UART_IM_TXIM ; R0 = R0
                                                            &~UART_IM_TXIM (dis
                                                            able TX FIFO interr
                                                            upt)
  355 0000015E 6008            STR              R0, [R1]    ; [R1] = R0
  356 00000160         handlerCheck1
  357 00000160 498D            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  358 00000162 6808            LDR              R0, [R1]    ; R0 = [R1]
  359 00000164 F000 0010       AND              R0, R0, #UART_RIS_RXRIS ; R0 = 
                                                            R0&UART_RIS_RXRIS
  360 00000168 2810            CMP              R0, #UART_RIS_RXRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            RXRIS) == UART_RIS_
                                                            RXRIS? (does hardwa
                                                            re RX FIFO have >= 
                                                            2 items?)
  361 0000016A D105            BNE              handlerCheck2 ; if not, skip to
                                                             'handlerCheck2' an
                                                            d check the next fl
                                                            ag



ARM Macro Assembler    Page 13 


  362 0000016C         ; acknowledge RX FIFO interrupt
  363 0000016C 498B            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  364 0000016E F04F 0010       LDR              R0, =UART_ICR_RXIC ; R0 = UART_
                                                            ICR_RXIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  365 00000172 6008            STR              R0, [R1]    ; [R1] = R0
  366 00000174         ; copy from hardware RX FIFO to software RX FIFO
  367 00000174 F7FF FF9D       BL               copyHardwareToSoftware ; privat
                                                            e helper subroutine
                                                            
  368 00000178         handlerCheck2
  369 00000178 4987            LDR              R1, =UART0_RIS_R 
                                                            ; R1 = &UART0_RIS_R
                                                            
  370 0000017A 6808            LDR              R0, [R1]    ; R0 = [R1]
  371 0000017C F000 0040       AND              R0, R0, #UART_RIS_RTRIS ; R0 = 
                                                            R0&UART_RIS_RTRIS
  372 00000180 2840            CMP              R0, #UART_RIS_RTRIS ; is R0 (UA
                                                            RT0_RIS_R&UART_RIS_
                                                            RTRIS) == UART_RIS_
                                                            RTRIS? (did the rec
                                                            eiver timeout?)
  373 00000182 D105            BNE              handlerDone ; if not, skip to '
                                                            handlerDone'
  374 00000184         ; acknowledge receiver timeout interrupt
  375 00000184 4985            LDR              R1, =UART0_ICR_R 
                                                            ; R1 = &UART0_ICR_R
                                                            
  376 00000186 F04F 0040       LDR              R0, =UART_ICR_RTIC ; R0 = UART_
                                                            ICR_RTIC (zeros wri
                                                            tten to interrupt c
                                                            lear register have 
                                                            no effect)
  377 0000018A 6008            STR              R0, [R1]    ; [R1] = R0
  378 0000018C         ; copy from hardware RX FIFO to software RX FIFO
  379 0000018C F7FF FF91       BL               copyHardwareToSoftware ; privat
                                                            e helper subroutine
                                                            
  380 00000190         handlerDone
  381 00000190 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return from inter
                                                            rupt)
  382 00000192         
  383 00000192         ;------------UART_OutString------------
  384 00000192         ; Output String (NULL termination)
  385 00000192         ; Input: R0  pointer to a NULL-terminated string to be t
                       ransferred
  386 00000192         ; Output: none
  387 00000192         UART_OutString
  388 00000192 B510            PUSH             {R4, LR}    ; save current valu
                                                            e of R4 and LR
  389 00000194 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             string pointer)
  390 00000196         outStringLoop



ARM Macro Assembler    Page 14 


  391 00000196 7820            LDRB             R0, [R4]    ; R0 = [R4] (R0 get
                                                            s unsigned characte
                                                            r pointed to by R4,
                                                             promoted to 32 bit
                                                            s)
  392 00000198 2800            CMP              R0, #0      ; is R0 (next chara
                                                            cter in string) == 
                                                            0 (NULL)?
  393 0000019A D004            BEQ              outStringDone ; if so, skip to 
                                                            'outStringDone'
  394 0000019C F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  395 000001A0 F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 (incr
                                                            ement string pointe
                                                            r)
  396 000001A4 E7F7            B                outStringLoop ; unconditional b
                                                            ranch to 'outString
                                                            Loop'
  397 000001A6         outStringDone
  398 000001A6 BD10            POP              {R4, PC}    ; restore previous 
                                                            value of R4 into R4
                                                             and LR into PC (re
                                                            turn)
  399 000001A8         
  400 000001A8         ;------------UART_InUDec------------
  401 000001A8         ; InUDec accepts ASCII input in unsigned decimal format
  402 000001A8         ;     and converts to a 32-bit unsigned number
  403 000001A8         ;     valid range is 0 to 4294967295 (2^32-1)
  404 000001A8         ; Input: none
  405 000001A8         ; Output: R0  32-bit unsigned number
  406 000001A8         ; If you enter a number above 4294967295, it will return
                        an incorrect value
  407 000001A8         ; Backspace will remove last digit typed
  408 000001A8         UART_InUDec
  409 000001A8 B530            PUSH             {R4, R5, LR} ; save current val
                                                            ue of R4, R5, and L
                                                            R
  410 000001AA F04F 0400       MOV              R4, #0      ; R4 = 0 (number = 
                                                            0)
  411 000001AE F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  412 000001B2         inUDecLoop
  413 000001B2         ; accepts characters until <enter> is typed
  414 000001B2 F7FF FFFE       BL               UART_InChar ; get a character f
                                                            rom the UART
  415 000001B6 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  416 000001B8 D01C            BEQ              inUDecDone  ; if so, skip to 'i
                                                            nUDecDone'
  417 000001BA         ; check if the input is a digit, 0-9
  418 000001BA         ; if the character is not 0-9, it is ignored and not ech
                       oed
  419 000001BA 2830            CMP              R0, #'0'    ; is R0 (most recen
                                                            t character) < '0'?
                                                            
  420 000001BC D30D            BLO              inUDecNAN   ; if so, skip to 'i
                                                            nUDecNAN'
  421 000001BE 2839            CMP              R0, #'9'    ; is R0 (most recen



ARM Macro Assembler    Page 15 


                                                            t character) > '9'?
                                                            
  422 000001C0 D80B            BHI              inUDecNAN   ; if so, skip to 'i
                                                            nUDecNAN'
  423 000001C2 F04F 010A       MOV              R1, #10     ; R1 = 10
  424 000001C6 FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*10)
  425 000001CA 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*10 + c
                                                            haracter)
  426 000001CC F1A4 0430       SUB              R4, R4, #'0' ; R4 = R4 - '0' (n
                                                            umber = number*10 +
                                                             character - '0')
  427 000001D0 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  428 000001D4 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  429 000001D8 E7EB            B                inUDecLoop  ; unconditional bra
                                                            nch to 'inUDecLoop'
                                                            
  430 000001DA         inUDecNAN
  431 000001DA         ; if the input is a backspace, then the return number is
                       
  432 000001DA         ; changed and a backspace is outputted to the screen
  433 000001DA 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  434 000001DC D1E9            BNE              inUDecLoop  ; if not, skip to '
                                                            inUDecLoop'
  435 000001DE 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  436 000001E0 D0E7            BEQ              inUDecLoop  ; if so, skip to 'i
                                                            nUDecLoop'
  437 000001E2 F04F 010A       MOV              R1, #10     ; R1 = 10
  438 000001E6 FBB4 F4F1       UDIV             R4, R4, R1  ; R4 = R4/R1 (numbe
                                                            r = number/10)
  439 000001EA F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng
                                                            th = length - 1)
  440 000001EE F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  441 000001F2         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  442 000001F2         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART
  443 000001F2         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  444 000001F2         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  445 000001F2 E7DE            B                inUDecLoop  ; unconditional bra
                                                            nch to 'inUDecLoop'
                                                            
  446 000001F4         inUDecDone
  447 000001F4 4620            MOV              R0, R4      ; R0 = R4 (return '
                                                            number' in R0)
  448 000001F6 BD30            POP              {R4, R5, PC} ; restore previous
                                                             value of R4 into R
                                                            4, R5 into R5, and 
                                                            LR into PC (return)
                                                            



ARM Macro Assembler    Page 16 


  449 000001F8         
  450 000001F8         ;Modulus macro from Section 5.4
  451 000001F8         ;Mod and Divnd must not be the same register
  452 000001F8                 MACRO
  453 000001F8                 UMOD             $Mod,$Divnd,$Divsr ;MOD,DIVIDEN
                                                            D,DIVISOR
  454 000001F8                 UDIV             $Mod,$Divnd,$Divsr ;Mod = DIVID
                                                            END/DIVISOR
  455 000001F8                 MUL              $Mod,$Mod,$Divsr ;Mod = DIVISOR
                                                            *(DIVIDEND/DIVISOR)
                                                            
  456 000001F8                 SUB              $Mod,$Divnd,$Mod ;Mod = DIVIDEN
                                                            D-DIVISOR*(DIVIDEND
                                                            /DIVISOR)
  457 000001F8                 MEND
  458 000001F8         
  459 000001F8         ;-----------------------UART_OutUDec--------------------
                       ---
  460 000001F8         ; Output a 32-bit number in unsigned decimal format
  461 000001F8         ; Input: R0  32-bit number to be transferred
  462 000001F8         ; Output: none
  463 000001F8         ; Variable format 1-10 digits with no space before or af
                       ter
  464 000001F8         UART_OutUDec
  465 000001F8         ; This function uses recursion to convert decimal number
                       
  466 000001F8         ;   of unspecified length as an ASCII string
  467 000001F8 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  468 000001FA 280A            CMP              R0, #10     ; is R0 (number) < 
                                                            10?
  469 000001FC D310            BLO              outUDecDone ; if so, skip to 'o
                                                            utUDecDone'
  470 000001FE         ; R0 (number) >= 10
  471 000001FE         ; recursive call to UART_OutUDec with R0/10 (number/10)
  472 000001FE B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  473 00000200 F04F 010A       MOV              R1, #10     ; R1 = 10
  474 00000204 FBB0 F0F1       UDIV             R0, R0, R1  ; R0 = R0/R1 (numbe
                                                            r = number/10)
  475 00000208 F7FF FFFE       BL               UART_OutUDec
  476 0000020C BC01            POP              {R0}        ; restore previous 
                                                            value of R0 into R0
                                                            
  477 0000020E         ; extract the ones digit of R0 (number) with R0 = R0%10
  478 0000020E F04F 010A       MOV              R1, #10     ; R1 = 10
  479 00000212 4602            MOV              R2, R0      ; R2 = R0 (temporar
                                                            ily holds number)
  480 00000214                 UMOD             R0, R2, R1  ; R0 = R2%R1 (numbe
                                                            r = number%10)
  454 00000214 FBB2 F0F1       UDIV             R0,R2,R1    ;Mod = DIVIDEND/DIV
                                                            ISOR
  455 00000218 FB00 F001       MUL              R0,R0,R1    ;Mod = DIVISOR*(DIV
                                                            IDEND/DIVISOR)
  456 0000021C EBA2 0000       SUB              R0,R2,R0    ;Mod = DIVIDEND-DIV
                                                            ISOR*(DIVIDEND/DIVI
                                                            SOR)
  481 00000220         outUDecDone
  482 00000220         ; R0 (number) is between 0 and 9



ARM Macro Assembler    Page 17 


  483 00000220 F100 0030       ADD              R0, R0, #'0' ; R0 = R0 + '0' (n
                                                            umber = number + '0
                                                            ')
  484 00000224 F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  485 00000228 BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  486 0000022A         
  487 0000022A         ;---------------------UART_InUHex-----------------------
                       -----------------
  488 0000022A         ; Accepts ASCII input in unsigned hexadecimal (base 16) 
                       format
  489 0000022A         ; Input: none
  490 0000022A         ; Output: R0  32-bit unsigned number
  491 0000022A         ; No '$' or '0x' need be entered, just the 1 to 8 hex di
                       gits
  492 0000022A         ; It will convert lower case a-f to uppercase A-F
  493 0000022A         ;     and converts to a 32-bit unsigned number
  494 0000022A         ;     value range is 0 to FFFFFFFF
  495 0000022A         ; If you enter a number above FFFFFFFF, it will return a
                       n incorrect value
  496 0000022A         ; Backspace will remove last digit typed
  497 0000022A         UART_InUHex
  498 0000022A B530            PUSH             {R4, R5, LR} ; save current val
                                                            ue of R4, R5, and L
                                                            R
  499 0000022C F04F 0400       MOV              R4, #0      ; R4 = 0 (number = 
                                                            0)
  500 00000230 F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  501 00000234         inUHexLoop
  502 00000234         ; accepts characters until <enter> is typed
  503 00000234 F7FF FFFE       BL               UART_InChar ; get a character f
                                                            rom the UART
  504 00000238 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  505 0000023A D040            BEQ              inUHexDone  ; if so, skip to 'i
                                                            nUHexDone'
  506 0000023C         ; check if the input is a digit, 0-9
  507 0000023C         ; if the character is not 0-9, check for other valid inp
                       ut
  508 0000023C 2830            CMP              R0, #'0'    ; is R0 (most recen
                                                            t character) < '0'?
                                                            
  509 0000023E D30D            BLO              inUHexNotDigit ; if so, skip to
                                                             'inUHexNotDigit'
  510 00000240 2839            CMP              R0, #'9'    ; is R0 (most recen
                                                            t character) > '9'?
                                                            
  511 00000242 D80B            BHI              inUHexNotDigit ; if so, skip to
                                                             'inUHexNotDigit'
  512 00000244 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  513 00000248 FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  514 0000024C 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c
                                                            haracter)



ARM Macro Assembler    Page 18 


  515 0000024E F1A4 0430       SUB              R4, R4, #'0' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - '0')
  516 00000252 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  517 00000256 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  518 0000025A E7EB            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  519 0000025C         inUHexNotDigit
  520 0000025C         ; check if the input is an uppercase letter, 'A'-'F'
  521 0000025C 2841            CMP              R0, #'A'    ; is R0 (most recen
                                                            t character) < 'A'?
                                                            
  522 0000025E D30F            BLO              inUHexNotUpper ; if so, skip to
                                                             'inUHexNotUpper'
  523 00000260 2846            CMP              R0, #'F'    ; is R0 (most recen
                                                            t character) > 'F'?
                                                            
  524 00000262 D80D            BHI              inUHexNotUpper ; if so, skip to
                                                             'inUHexNotUpper'
  525 00000264 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  526 00000268 FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  527 0000026C 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c
                                                            haracter)
  528 0000026E F1A4 0441       SUB              R4, R4, #'A' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - 'A')
  529 00000272 F104 040A       ADD              R4, R4, #0xA ; R4 = R4 + 0xA (n
                                                            umber = number*16 +
                                                             character - 'A' + 
                                                            10)
  530 00000276 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  531 0000027A F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  532 0000027E E7D9            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  533 00000280         inUHexNotUpper
  534 00000280         ; check if the input is a lowercase letter, 'a'-'f'
  535 00000280 2861            CMP              R0, #'a'    ; is R0 (most recen
                                                            t character) < 'a'?
                                                            
  536 00000282 D30F            BLO              inUHexOther ; if so, skip to 'i
                                                            nUHexOther'
  537 00000284 2866            CMP              R0, #'f'    ; is R0 (most recen
                                                            t character) > 'f'?
                                                            
  538 00000286 D80D            BHI              inUHexOther ; if so, skip to 'i
                                                            nUHexOther'
  539 00000288 F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  540 0000028C FB04 F401       MUL              R4, R4, R1  ; R4 = R4*R1 (numbe
                                                            r = number*16)
  541 00000290 4404            ADD              R4, R4, R0  ; R4 = R4 + R0 (num
                                                            ber = number*16 + c



ARM Macro Assembler    Page 19 


                                                            haracter)
  542 00000292 F1A4 0461       SUB              R4, R4, #'a' ; R4 = R4 - '0' (n
                                                            umber = number*16 +
                                                             character - 'a')
  543 00000296 F104 040A       ADD              R4, R4, #0xA ; R4 = R4 + 0xA (n
                                                            umber = number*16 +
                                                             character - 'a' + 
                                                            10)
  544 0000029A F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  545 0000029E F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  546 000002A2 E7C7            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  547 000002A4         inUHexOther
  548 000002A4         ; if the input is a backspace, then the return number is
                       
  549 000002A4         ; changed and a backspace is outputted to the screen
  550 000002A4 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  551 000002A6 D1C5            BNE              inUHexLoop  ; if not, skip to '
                                                            inUHexLoop'
  552 000002A8 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  553 000002AA D0C3            BEQ              inUHexLoop  ; if so, skip to 'i
                                                            nUHexLoop'
  554 000002AC F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  555 000002B0 FBB4 F4F1       UDIV             R4, R4, R1  ; R4 = R4/R1 (numbe
                                                            r = number/16)
  556 000002B4 F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng
                                                            th = length - 1)
  557 000002B8 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  558 000002BC         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  559 000002BC         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART
  560 000002BC         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  561 000002BC         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  562 000002BC E7BA            B                inUHexLoop  ; unconditional bra
                                                            nch to 'inUHexLoop'
                                                            
  563 000002BE         inUHexDone
  564 000002BE 4620            MOV              R0, R4      ; R0 = R4 (return '
                                                            number' in R0)
  565 000002C0 BD30            POP              {R4, R5, PC} ; restore previous
                                                             value of R4 into R
                                                            4, R5 into R5, and 
                                                            LR into PC (return)
                                                            
  566 000002C2         
  567 000002C2         ;--------------------------UART_OutUHex-----------------
                       -----------
  568 000002C2         ; Output a 32-bit number in unsigned hexadecimal format
  569 000002C2         ; Input: R0  32-bit number to be transferred



ARM Macro Assembler    Page 20 


  570 000002C2         ; Output: none
  571 000002C2         ; Variable format 1 to 8 digits with no space before or 
                       after
  572 000002C2         UART_OutUHex
  573 000002C2         ; This function uses recursion to convert the number of
  574 000002C2         ;   unspecified length as an ASCII string
  575 000002C2 B500            PUSH             {LR}        ; save current valu
                                                            e of LR
  576 000002C4 2810            CMP              R0, #0x10   ; is R0 (number) < 
                                                            16?
  577 000002C6 D315            BLO              outUHexOneDigit ; if so, skip t
                                                            o 'outUHexOneDigit'
                                                            
  578 000002C8         outUHexManyDigits
  579 000002C8         ; R0 (number) >= 16
  580 000002C8         ; recursive call to UART_OutUHex with R0/0x10 (number/0x
                       10)
  581 000002C8 B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  582 000002CA F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  583 000002CE FBB0 F0F1       UDIV             R0, R0, R1  ; R0 = R0/R1 (numbe
                                                            r = number/0x10)
  584 000002D2 F7FF FFFE       BL               UART_OutUHex
  585 000002D6 BC01            POP              {R0}        ; restore previous 
                                                            value of R0 into R0
                                                            
  586 000002D8         ; recursive call to UART_OutUHex with R0%0x10 (number%0x
                       10)
  587 000002D8 B401            PUSH             {R0}        ; save current valu
                                                            e of R0 (number)
  588 000002DA F04F 0110       MOV              R1, #0x10   ; R1 = 0x10 = 16
  589 000002DE 4602            MOV              R2, R0      ; R2 = R0 (temporar
                                                            ily holds number)
  590 000002E0                 UMOD             R0, R2, R1  ; R0 = R2%R1 (numbe
                                                            r = number%0x10)
  454 000002E0 FBB2 F0F1       UDIV             R0,R2,R1    ;Mod = DIVIDEND/DIV
                                                            ISOR
  455 000002E4 FB00 F001       MUL              R0,R0,R1    ;Mod = DIVISOR*(DIV
                                                            IDEND/DIVISOR)
  456 000002E8 EBA2 0000       SUB              R0,R2,R0    ;Mod = DIVIDEND-DIV
                                                            ISOR*(DIVIDEND/DIVI
                                                            SOR)
  591 000002EC F7FF FFFE       BL               UART_OutUHex
  592 000002F0 BC01            POP              {R0}        ; restore previous 
                                                            value of R0 into R0
                                                            
  593 000002F2 E00C            B                outUHexDone ; unconditional bra
                                                            nch to 'outUHexDone
                                                            '
  594 000002F4         outUHexOneDigit
  595 000002F4         ; R0 (number) is between 0 and 15
  596 000002F4 280A            CMP              R0, #0xA    ; is R0 (number) < 
                                                            10?
  597 000002F6 D306            BLO              outUHexOneNumber ; if so, skip 
                                                            to 'outUHexOneNumbe
                                                            r'
  598 000002F8         outUHexOneLetter
  599 000002F8         ; R0 (number) is between 10 and 15
  600 000002F8         ; convert R0 to a character between 'A' and 'F'



ARM Macro Assembler    Page 21 


  601 000002F8 F1A0 000A       SUB              R0, R0, #0xA ; R0 = R0 - 10 (nu
                                                            mber = number - 0xA
                                                            )
  602 000002FC F100 0041       ADD              R0, R0, #'A' ; R0 = R0 + 'A' (n
                                                            umber = number - 0x
                                                            A + 'A')
  603 00000300 F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  604 00000304 E003            B                outUHexDone ; unconditional bra
                                                            nch to 'outUHexDone
                                                            '
  605 00000306         outUHexOneNumber
  606 00000306         ; R0 (number) is between 0 and 9
  607 00000306         ; convert R0 to a character between '0' and '9'
  608 00000306 F100 0030       ADD              R0, R0, #'0' ; R0 = R0 + 'A' (n
                                                            umber = number + '0
                                                            ')
  609 0000030A F7FF FFFE       BL               UART_OutChar ; send the charact
                                                            er to the UART
  610 0000030E         outUHexDone
  611 0000030E BD00            POP              {PC}        ; restore previous 
                                                            value of LR into PC
                                                             (return)
  612 00000310         
  613 00000310         ;------------UART_InString------------
  614 00000310         ; Accepts ASCII characters from the serial port
  615 00000310         ;    and adds them to a string until <enter> is typed
  616 00000310         ;    or until max length of the string is reached.
  617 00000310         ; It echoes each character as it is inputted.
  618 00000310         ; If a backspace is inputted, the string is modified
  619 00000310         ;    and the backspace is echoed
  620 00000310         ; terminates the string with a null character
  621 00000310         ; uses busy-waiting synchronization on RDRF
  622 00000310         ; Input: R0  pointer to empty buffer
  623 00000310         ;        R1  number of non-NULL characters that can
  624 00000310         ;            fit in the buffer (in other words size-1)
  625 00000310         ; Output: R0  pointer to NULL-terminated string
  626 00000310         ; -- Modified by Agustinus Darmawan + Mingjie Qiu --
  627 00000310         UART_InString
  628 00000310 B570            PUSH             {R4, R5, R6, LR} ; save current
                                                             value of R4, R5, R
                                                            6, and LR
  629 00000312 4604            MOV              R4, R0      ; R4 = R0 (save the
                                                             buffer pointer par
                                                            ameter)
  630 00000314 F04F 0500       MOV              R5, #0      ; R5 = 0 (length = 
                                                            0)
  631 00000318 460E            MOV              R6, R1      ; R6 = R1 (save the
                                                             max length paramet
                                                            er)
  632 0000031A         inStringLoop
  633 0000031A         ; accepts characters until <enter> is typed
  634 0000031A F7FF FFFE       BL               UART_InChar ; get a character f
                                                            rom the UART
  635 0000031E 280D            CMP              R0, #CR     ; is R0 (most recen
                                                            t character) == 0x0
                                                            D (<enter>)?
  636 00000320 D014            BEQ              inStringDone ; if so, skip to '
                                                            inStringDone'



ARM Macro Assembler    Page 22 


  637 00000322         ; if the input is a backspace, then the return string is
                       
  638 00000322         ; changed and a backspace is outputted to the screen
  639 00000322 2808            CMP              R0, #BS     ; is R0 (most recen
                                                            t character) == 0x0
                                                            8 (<backspace>)?
  640 00000324 D108            BNE              inStringCont ; if not, skip to 
                                                            'inStringCont'
  641 00000326 2D00            CMP              R5, #0      ; is R5 (length) ==
                                                             0?
  642 00000328 D0F7            BEQ              inStringLoop ; if so, skip to '
                                                            inStringLoop'
  643 0000032A F1A4 0401       SUB              R4, R4, #1  ; R4 = R4 - 1 (buff
                                                            erPt = bufferPt - 1
                                                            )
  644 0000032E F1A5 0501       SUB              R5, R5, #1  ; R5 = R5 - 1 (leng
                                                            th = length - 1)
  645 00000332 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  646 00000336         ;    MOV R0, #SPA                    ; R0 = SPA (<space>
                       )
  647 00000336         ;    BL  UART_OutChar                ; echo additional <
                       space> to the UART
  648 00000336         ;    MOV R0, #BS                     ; R0 = BS (<backspa
                       ce>)
  649 00000336         ;    BL  UART_OutChar                ; echo additional <
                       backspace> to the UART
  650 00000336 E7F0            B                inStringLoop ; unconditional br
                                                            anch to 'inStringLo
                                                            op'
  651 00000338         inStringCont
  652 00000338         ; if the buffer has room for another character, add the
  653 00000338         ; incoming character to the buffer
  654 00000338 42B5            CMP              R5, R6      ; is R5 (length) ==
                                                             R6 (max length)?
  655 0000033A D0EE            BEQ              inStringLoop ; if so, skip to '
                                                            inUDecLoop'
  656 0000033C 7020            STRB             R0, [R4]    ; [R4] = R0 (store 
                                                            8 least significant
                                                             bits of R0 into lo
                                                            cation pointed to b
                                                            y R4)
  657 0000033E F104 0401       ADD              R4, R4, #1  ; R4 = R4 + 1 (buff
                                                            erPt = bufferPt + 1
                                                            )
  658 00000342 F105 0501       ADD              R5, R5, #1  ; R5 = R5 + 1 (leng
                                                            th = length + 1)
  659 00000346 F7FF FFFE       BL               UART_OutChar ; echo the charact
                                                            er to the UART
  660 0000034A E7E6            B                inStringLoop ; unconditional br
                                                            anch to 'inStringLo
                                                            op'
  661 0000034C         inStringDone
  662 0000034C         ; NULL terminate the string
  663 0000034C F04F 0000       MOV              R0, #0      ; R0 = 0 = NULL
  664 00000350 7020            STRB             R0, [R4]    ; [R4] = R0 (store 
                                                            R0 (NULL) into loca
                                                            tion pointed to by 
                                                            R4)



ARM Macro Assembler    Page 23 


  665 00000352 4620            MOV              R0, R4      ; R0 = R4 (return t
                                                            he buffer pointer i
                                                            n R0)
  666 00000354 BD70            POP              {R4, R5, R6, PC} ; restore prev
                                                            ious value of R4 in
                                                            to R4, R5 into R5, 
                                                            R6 into R6, and LR 
                                                            into PC (return)
  667 00000356         
  668 00000356 00 00           ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  669 00000358                 END                          ; end of file
              400FE104 
              400FE108 
              4000C030 
              4000C024 
              4000C028 
              4000C02C 
              4000C034 
              4000C038 
              40004420 
              4000451C 
              4000452C 
              40004528 
              E000E404 
              E000E100 
              4000C018 
              4000C000 
              4000C03C 
              4000C044 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=UART2.d 
-oUART2.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Luminary --list=UART2.lst UART2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 105 in file UART2.s
   Uses
      None
Comment: .text unused
UART0_Handler 00000134

Symbol: UART0_Handler
   Definitions
      At line 332 in file UART2.s
   Uses
      At line 110 in file UART2.s
Comment: UART0_Handler used once
UART_InChar 000000FC

Symbol: UART_InChar
   Definitions
      At line 284 in file UART2.s
   Uses
      At line 108 in file UART2.s
      At line 414 in file UART2.s
      At line 503 in file UART2.s
      At line 634 in file UART2.s

UART_InString 00000310

Symbol: UART_InString
   Definitions
      At line 627 in file UART2.s
   Uses
      At line 116 in file UART2.s
Comment: UART_InString used once
UART_InUDec 000001A8

Symbol: UART_InUDec
   Definitions
      At line 408 in file UART2.s
   Uses
      At line 112 in file UART2.s
Comment: UART_InUDec used once
UART_InUHex 0000022A

Symbol: UART_InUHex
   Definitions
      At line 497 in file UART2.s
   Uses
      At line 114 in file UART2.s
Comment: UART_InUHex used once
UART_Init 00000000

Symbol: UART_Init
   Definitions
      At line 127 in file UART2.s
   Uses
      At line 107 in file UART2.s
Comment: UART_Init used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

UART_OutChar 0000010E

Symbol: UART_OutChar
   Definitions
      At line 309 in file UART2.s
   Uses
      At line 109 in file UART2.s
      At line 394 in file UART2.s
      At line 428 in file UART2.s
      At line 440 in file UART2.s
      At line 484 in file UART2.s
      At line 517 in file UART2.s
      At line 531 in file UART2.s
      At line 545 in file UART2.s
      At line 557 in file UART2.s
      At line 603 in file UART2.s
      At line 609 in file UART2.s
      At line 645 in file UART2.s
      At line 659 in file UART2.s

UART_OutString 00000192

Symbol: UART_OutString
   Definitions
      At line 387 in file UART2.s
   Uses
      At line 111 in file UART2.s
Comment: UART_OutString used once
UART_OutUDec 000001F8

Symbol: UART_OutUDec
   Definitions
      At line 464 in file UART2.s
   Uses
      At line 113 in file UART2.s
      At line 475 in file UART2.s

UART_OutUHex 000002C2

Symbol: UART_OutUHex
   Definitions
      At line 572 in file UART2.s
   Uses
      At line 115 in file UART2.s
      At line 584 in file UART2.s
      At line 591 in file UART2.s

copyHardwareToSoftware 000000B2

Symbol: copyHardwareToSoftware
   Definitions
      At line 222 in file UART2.s
   Uses
      At line 367 in file UART2.s
      At line 379 in file UART2.s

copySoftwareToHardware 000000D4

Symbol: copySoftwareToHardware



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 246 in file UART2.s
   Uses
      At line 321 in file UART2.s
      At line 346 in file UART2.s

h2sdone 000000D2

Symbol: h2sdone
   Definitions
      At line 240 in file UART2.s
   Uses
      At line 230 in file UART2.s
      At line 233 in file UART2.s

h2sloop 000000B4

Symbol: h2sloop
   Definitions
      At line 224 in file UART2.s
   Uses
      At line 239 in file UART2.s
Comment: h2sloop used once
handlerCheck0 00000136

Symbol: handlerCheck0
   Definitions
      At line 335 in file UART2.s
   Uses
      None
Comment: handlerCheck0 unused
handlerCheck1 00000160

Symbol: handlerCheck1
   Definitions
      At line 356 in file UART2.s
   Uses
      At line 340 in file UART2.s
      At line 351 in file UART2.s

handlerCheck2 00000178

Symbol: handlerCheck2
   Definitions
      At line 368 in file UART2.s
   Uses
      At line 361 in file UART2.s
Comment: handlerCheck2 used once
handlerDone 00000190

Symbol: handlerDone
   Definitions
      At line 380 in file UART2.s
   Uses
      At line 373 in file UART2.s
Comment: handlerDone used once
inCharLoop 00000102

Symbol: inCharLoop



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 287 in file UART2.s
   Uses
      At line 291 in file UART2.s
Comment: inCharLoop used once
inStringCont 00000338

Symbol: inStringCont
   Definitions
      At line 651 in file UART2.s
   Uses
      At line 640 in file UART2.s
Comment: inStringCont used once
inStringDone 0000034C

Symbol: inStringDone
   Definitions
      At line 661 in file UART2.s
   Uses
      At line 636 in file UART2.s
Comment: inStringDone used once
inStringLoop 0000031A

Symbol: inStringLoop
   Definitions
      At line 632 in file UART2.s
   Uses
      At line 642 in file UART2.s
      At line 650 in file UART2.s
      At line 655 in file UART2.s
      At line 660 in file UART2.s

inUDecDone 000001F4

Symbol: inUDecDone
   Definitions
      At line 446 in file UART2.s
   Uses
      At line 416 in file UART2.s
Comment: inUDecDone used once
inUDecLoop 000001B2

Symbol: inUDecLoop
   Definitions
      At line 412 in file UART2.s
   Uses
      At line 429 in file UART2.s
      At line 434 in file UART2.s
      At line 436 in file UART2.s
      At line 445 in file UART2.s

inUDecNAN 000001DA

Symbol: inUDecNAN
   Definitions
      At line 430 in file UART2.s
   Uses
      At line 420 in file UART2.s
      At line 422 in file UART2.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols


inUHexDone 000002BE

Symbol: inUHexDone
   Definitions
      At line 563 in file UART2.s
   Uses
      At line 505 in file UART2.s
Comment: inUHexDone used once
inUHexLoop 00000234

Symbol: inUHexLoop
   Definitions
      At line 501 in file UART2.s
   Uses
      At line 518 in file UART2.s
      At line 532 in file UART2.s
      At line 546 in file UART2.s
      At line 551 in file UART2.s
      At line 553 in file UART2.s
      At line 562 in file UART2.s

inUHexNotDigit 0000025C

Symbol: inUHexNotDigit
   Definitions
      At line 519 in file UART2.s
   Uses
      At line 509 in file UART2.s
      At line 511 in file UART2.s

inUHexNotUpper 00000280

Symbol: inUHexNotUpper
   Definitions
      At line 533 in file UART2.s
   Uses
      At line 522 in file UART2.s
      At line 524 in file UART2.s

inUHexOther 000002A4

Symbol: inUHexOther
   Definitions
      At line 547 in file UART2.s
   Uses
      At line 536 in file UART2.s
      At line 538 in file UART2.s

outCharLoop 00000112

Symbol: outCharLoop
   Definitions
      At line 312 in file UART2.s
   Uses
      At line 316 in file UART2.s
Comment: outCharLoop used once
outStringDone 000001A6




ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

Symbol: outStringDone
   Definitions
      At line 397 in file UART2.s
   Uses
      At line 393 in file UART2.s
Comment: outStringDone used once
outStringLoop 00000196

Symbol: outStringLoop
   Definitions
      At line 390 in file UART2.s
   Uses
      At line 396 in file UART2.s
Comment: outStringLoop used once
outUDecDone 00000220

Symbol: outUDecDone
   Definitions
      At line 481 in file UART2.s
   Uses
      At line 469 in file UART2.s
Comment: outUDecDone used once
outUHexDone 0000030E

Symbol: outUHexDone
   Definitions
      At line 610 in file UART2.s
   Uses
      At line 593 in file UART2.s
      At line 604 in file UART2.s

outUHexManyDigits 000002C8

Symbol: outUHexManyDigits
   Definitions
      At line 578 in file UART2.s
   Uses
      None
Comment: outUHexManyDigits unused
outUHexOneDigit 000002F4

Symbol: outUHexOneDigit
   Definitions
      At line 594 in file UART2.s
   Uses
      At line 577 in file UART2.s
Comment: outUHexOneDigit used once
outUHexOneLetter 000002F8

Symbol: outUHexOneLetter
   Definitions
      At line 598 in file UART2.s
   Uses
      None
Comment: outUHexOneLetter unused
outUHexOneNumber 00000306

Symbol: outUHexOneNumber
   Definitions



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

      At line 605 in file UART2.s
   Uses
      At line 597 in file UART2.s
Comment: outUHexOneNumber used once
s2hdone 000000FA

Symbol: s2hdone
   Definitions
      At line 267 in file UART2.s
   Uses
      At line 254 in file UART2.s
      At line 257 in file UART2.s

s2hloop 000000D6

Symbol: s2hloop
   Definitions
      At line 248 in file UART2.s
   Uses
      At line 266 in file UART2.s
Comment: s2hloop used once
42 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BS 00000008

Symbol: BS
   Definitions
      At line 100 in file UART2.s
   Uses
      At line 433 in file UART2.s
      At line 550 in file UART2.s
      At line 639 in file UART2.s

CR 0000000D

Symbol: CR
   Definitions
      At line 98 in file UART2.s
   Uses
      At line 415 in file UART2.s
      At line 504 in file UART2.s
      At line 635 in file UART2.s

DEL 0000007F

Symbol: DEL
   Definitions
      At line 103 in file UART2.s
   Uses
      None
Comment: DEL unused
ESC 0000001B

Symbol: ESC
   Definitions
      At line 101 in file UART2.s
   Uses
      None
Comment: ESC unused
FIFOFAIL 00000000

Symbol: FIFOFAIL
   Definitions
      At line 85 in file UART2.s
   Uses
      At line 290 in file UART2.s
      At line 315 in file UART2.s

FIFOSIZE 00000010

Symbol: FIFOSIZE
   Definitions
      At line 83 in file UART2.s
   Uses
      At line 232 in file UART2.s
Comment: FIFOSIZE used once
FIFOSUCCESS 00000001

Symbol: FIFOSUCCESS
   Definitions
      At line 84 in file UART2.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      None
Comment: FIFOSUCCESS unused
GPIO_PORTA_AFSEL_R 40004420

Symbol: GPIO_PORTA_AFSEL_R
   Definitions
      At line 35 in file UART2.s
   Uses
      At line 186 in file UART2.s
Comment: GPIO_PORTA_AFSEL_R used once
GPIO_PORTA_AMSEL_R 40004528

Symbol: GPIO_PORTA_AMSEL_R
   Definitions
      At line 37 in file UART2.s
   Uses
      At line 202 in file UART2.s
Comment: GPIO_PORTA_AMSEL_R used once
GPIO_PORTA_DEN_R 4000451C

Symbol: GPIO_PORTA_DEN_R
   Definitions
      At line 36 in file UART2.s
   Uses
      At line 191 in file UART2.s
Comment: GPIO_PORTA_DEN_R used once
GPIO_PORTA_PCTL_R 4000452C

Symbol: GPIO_PORTA_PCTL_R
   Definitions
      At line 38 in file UART2.s
   Uses
      At line 196 in file UART2.s
Comment: GPIO_PORTA_PCTL_R used once
LF 0000000A

Symbol: LF
   Definitions
      At line 99 in file UART2.s
   Uses
      None
Comment: LF unused
NVIC_EN0_INT5 00000020

Symbol: NVIC_EN0_INT5
   Definitions
      At line 32 in file UART2.s
   Uses
      At line 213 in file UART2.s
Comment: NVIC_EN0_INT5 used once
NVIC_EN0_R E000E100

Symbol: NVIC_EN0_R
   Definitions
      At line 33 in file UART2.s
   Uses
      At line 212 in file UART2.s
Comment: NVIC_EN0_R used once
NVIC_PRI1_R E000E404



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols


Symbol: NVIC_PRI1_R
   Definitions
      At line 34 in file UART2.s
   Uses
      At line 206 in file UART2.s
Comment: NVIC_PRI1_R used once
SPA 00000020

Symbol: SPA
   Definitions
      At line 102 in file UART2.s
   Uses
      None
Comment: SPA unused
SYSCTL_RCGC1_R 400FE104

Symbol: SYSCTL_RCGC1_R
   Definitions
      At line 70 in file UART2.s
   Uses
      At line 131 in file UART2.s
Comment: SYSCTL_RCGC1_R used once
SYSCTL_RCGC1_UART0 00000001

Symbol: SYSCTL_RCGC1_UART0
   Definitions
      At line 72 in file UART2.s
   Uses
      At line 133 in file UART2.s
Comment: SYSCTL_RCGC1_UART0 used once
SYSCTL_RCGC2_GPIOA 00000001

Symbol: SYSCTL_RCGC2_GPIOA
   Definitions
      At line 73 in file UART2.s
   Uses
      At line 138 in file UART2.s
Comment: SYSCTL_RCGC2_GPIOA used once
SYSCTL_RCGC2_R 400FE108

Symbol: SYSCTL_RCGC2_R
   Definitions
      At line 71 in file UART2.s
   Uses
      At line 136 in file UART2.s
Comment: SYSCTL_RCGC2_R used once
UART0_CTL_R 4000C030

Symbol: UART0_CTL_R
   Definitions
      At line 44 in file UART2.s
   Uses
      At line 144 in file UART2.s
      At line 181 in file UART2.s

UART0_DR_R 4000C000

Symbol: UART0_DR_R



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 39 in file UART2.s
   Uses
      At line 235 in file UART2.s
      At line 264 in file UART2.s

UART0_FBRD_R 4000C028

Symbol: UART0_FBRD_R
   Definitions
      At line 42 in file UART2.s
   Uses
      At line 152 in file UART2.s
Comment: UART0_FBRD_R used once
UART0_FR_R 4000C018

Symbol: UART0_FR_R
   Definitions
      At line 40 in file UART2.s
   Uses
      At line 226 in file UART2.s
      At line 250 in file UART2.s

UART0_IBRD_R 4000C024

Symbol: UART0_IBRD_R
   Definitions
      At line 41 in file UART2.s
   Uses
      At line 149 in file UART2.s
Comment: UART0_IBRD_R used once
UART0_ICR_R 4000C044

Symbol: UART0_ICR_R
   Definitions
      At line 48 in file UART2.s
   Uses
      At line 342 in file UART2.s
      At line 363 in file UART2.s
      At line 375 in file UART2.s

UART0_IFLS_R 4000C034

Symbol: UART0_IFLS_R
   Definitions
      At line 45 in file UART2.s
   Uses
      At line 163 in file UART2.s
Comment: UART0_IFLS_R used once
UART0_IM_R 4000C038

Symbol: UART0_IM_R
   Definitions
      At line 46 in file UART2.s
   Uses
      At line 175 in file UART2.s
      At line 317 in file UART2.s
      At line 352 in file UART2.s




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

UART0_LCRH_R 4000C02C

Symbol: UART0_LCRH_R
   Definitions
      At line 43 in file UART2.s
   Uses
      At line 156 in file UART2.s
Comment: UART0_LCRH_R used once
UART0_RIS_R 4000C03C

Symbol: UART0_RIS_R
   Definitions
      At line 47 in file UART2.s
   Uses
      At line 336 in file UART2.s
      At line 357 in file UART2.s
      At line 369 in file UART2.s

UART_CTL_UARTEN 00000001

Symbol: UART_CTL_UARTEN
   Definitions
      At line 54 in file UART2.s
   Uses
      At line 146 in file UART2.s
      At line 183 in file UART2.s

UART_FR_RXFE 00000010

Symbol: UART_FR_RXFE
   Definitions
      At line 51 in file UART2.s
   Uses
      At line 228 in file UART2.s
      At line 229 in file UART2.s

UART_FR_RXFF 00000040

Symbol: UART_FR_RXFF
   Definitions
      At line 49 in file UART2.s
   Uses
      None
Comment: UART_FR_RXFF unused
UART_FR_TXFF 00000020

Symbol: UART_FR_TXFF
   Definitions
      At line 50 in file UART2.s
   Uses
      At line 252 in file UART2.s
      At line 253 in file UART2.s

UART_ICR_RTIC 00000040

Symbol: UART_ICR_RTIC
   Definitions
      At line 67 in file UART2.s
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      At line 376 in file UART2.s
Comment: UART_ICR_RTIC used once
UART_ICR_RXIC 00000010

Symbol: UART_ICR_RXIC
   Definitions
      At line 69 in file UART2.s
   Uses
      At line 364 in file UART2.s
Comment: UART_ICR_RXIC used once
UART_ICR_TXIC 00000020

Symbol: UART_ICR_TXIC
   Definitions
      At line 68 in file UART2.s
   Uses
      At line 343 in file UART2.s
Comment: UART_ICR_TXIC used once
UART_IFLS_RX1_8 00000000

Symbol: UART_IFLS_RX1_8
   Definitions
      At line 55 in file UART2.s
   Uses
      At line 168 in file UART2.s
Comment: UART_IFLS_RX1_8 used once
UART_IFLS_TX1_8 00000000

Symbol: UART_IFLS_TX1_8
   Definitions
      At line 56 in file UART2.s
   Uses
      At line 168 in file UART2.s
Comment: UART_IFLS_TX1_8 used once
UART_IM_RTIM 00000040

Symbol: UART_IM_RTIM
   Definitions
      At line 57 in file UART2.s
   Uses
      At line 178 in file UART2.s
Comment: UART_IM_RTIM used once
UART_IM_RXIM 00000010

Symbol: UART_IM_RXIM
   Definitions
      At line 60 in file UART2.s
   Uses
      At line 178 in file UART2.s
Comment: UART_IM_RXIM used once
UART_IM_TXIM 00000020

Symbol: UART_IM_TXIM
   Definitions
      At line 59 in file UART2.s
   Uses
      At line 178 in file UART2.s
      At line 319 in file UART2.s
      At line 323 in file UART2.s



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols

      At line 354 in file UART2.s

UART_LCRH_FEN 00000010

Symbol: UART_LCRH_FEN
   Definitions
      At line 53 in file UART2.s
   Uses
      At line 160 in file UART2.s
Comment: UART_LCRH_FEN used once
UART_LCRH_WLEN_8 00000060

Symbol: UART_LCRH_WLEN_8
   Definitions
      At line 52 in file UART2.s
   Uses
      At line 160 in file UART2.s
Comment: UART_LCRH_WLEN_8 used once
UART_RIS_RTRIS 00000040

Symbol: UART_RIS_RTRIS
   Definitions
      At line 61 in file UART2.s
   Uses
      At line 371 in file UART2.s
      At line 372 in file UART2.s

UART_RIS_RXRIS 00000010

Symbol: UART_RIS_RXRIS
   Definitions
      At line 65 in file UART2.s
   Uses
      At line 359 in file UART2.s
      At line 360 in file UART2.s

UART_RIS_TXRIS 00000020

Symbol: UART_RIS_TXRIS
   Definitions
      At line 63 in file UART2.s
   Uses
      At line 338 in file UART2.s
      At line 339 in file UART2.s

47 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

DisableInterrupts 00000000

Symbol: DisableInterrupts
   Definitions
      At line 75 in file UART2.s
   Uses
      At line 129 in file UART2.s
Comment: DisableInterrupts used once
EnableInterrupts 00000000

Symbol: EnableInterrupts
   Definitions
      At line 76 in file UART2.s
   Uses
      At line 215 in file UART2.s
Comment: EnableInterrupts used once
EndCritical 00000000

Symbol: EndCritical
   Definitions
      At line 78 in file UART2.s
   Uses
      None
Comment: EndCritical unused
RxFifo_Get 00000000

Symbol: RxFifo_Get
   Definitions
      At line 94 in file UART2.s
   Uses
      At line 289 in file UART2.s
Comment: RxFifo_Get used once
RxFifo_Init 00000000

Symbol: RxFifo_Init
   Definitions
      At line 92 in file UART2.s
   Uses
      At line 141 in file UART2.s
Comment: RxFifo_Init used once
RxFifo_Put 00000000

Symbol: RxFifo_Put
   Definitions
      At line 93 in file UART2.s
   Uses
      At line 238 in file UART2.s
Comment: RxFifo_Put used once
RxFifo_Size 00000000

Symbol: RxFifo_Size
   Definitions
      At line 95 in file UART2.s
   Uses
      At line 231 in file UART2.s
Comment: RxFifo_Size used once
StartCritical 00000000

Symbol: StartCritical



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

   Definitions
      At line 77 in file UART2.s
   Uses
      None
Comment: StartCritical unused
TxFifo_Get 00000000

Symbol: TxFifo_Get
   Definitions
      At line 90 in file UART2.s
   Uses
      At line 261 in file UART2.s
Comment: TxFifo_Get used once
TxFifo_Init 00000000

Symbol: TxFifo_Init
   Definitions
      At line 88 in file UART2.s
   Uses
      At line 142 in file UART2.s
Comment: TxFifo_Init used once
TxFifo_Put 00000000

Symbol: TxFifo_Put
   Definitions
      At line 89 in file UART2.s
   Uses
      At line 314 in file UART2.s
Comment: TxFifo_Put used once
TxFifo_Size 00000000

Symbol: TxFifo_Size
   Definitions
      At line 91 in file UART2.s
   Uses
      At line 255 in file UART2.s
      At line 349 in file UART2.s

WaitForInterrupt 00000000

Symbol: WaitForInterrupt
   Definitions
      At line 79 in file UART2.s
   Uses
      None
Comment: WaitForInterrupt unused
13 symbols
434 symbols in table

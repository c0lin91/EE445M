


ARM Macro Assembler    Page 1 


    1 00000000         ;*****Your name goes here*******
    2 00000000         ; -5 points if you do not add your name
    3 00000000         
    4 00000000         ;This is Exam2_Merge 
    5 00000000         ;EE319K Practice exam
    6 00000000         ;You edit this file only
    7 00000000                 AREA             Data, ALIGN=4
    8 00000000         
    9 00000000         
   10 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   11 00000000                 THUMB
   12 00000000         
   13 00000000         ;***** Init *********************
   14 00000000         ;Initialize the array to a value
   15 00000000         ;Each value is 16-bit unsigned
   16 00000000         ;Initialize the first array to 1 and the second array to
                        -1
   17 00000000         ;Inputs:  R0 is a pointer to an empty array of 16-bit un
                       signed numbers
   18 00000000         ;         R1 is the 16-bit unsigned value to be stored i
                       nto each element
   19 00000000         ;         R2 is the number of 16-bit unsigned values in 
                       the array
   20 00000000         ;         The array maybe of zero length (R2 may be zero
                       )
   21 00000000         ;Output:  none
   22 00000000         ;Error conditions: none
   23 00000000         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   24 00000000         ;Test cases
   25 00000000         ;R0=>empty array, R1=3,R2=4, result new array is {3,3,3,
                       3}
   26 00000000         ;R0=>empty array, R1=7,R2=1, result new array is {7}
   27 00000000         ;R0=>empty array, R1=5,R2=8, result new array is {5,5,5,
                       5,5,5,5,5}
   28 00000000         ;R0=>empty array, R1=0,R2=0, result is no change to empt
                       y array
   29 00000000                 EXPORT           Init
   30 00000000         Init
   31 00000000         ; put your code here
   32 00000000 2A00    Init_loop
                               CMP              R2, #0
   33 00000002 D004            BEQ              Init_Done
   34 00000004 8001            STRH             R1, [R0]
   35 00000006 F100 0002       ADD              R0, #2
   36 0000000A 3A01            SUBS             R2, #1
   37 0000000C E7F8            B                Init_loop
   38 0000000E         Init_Done
   39 0000000E 4770            BX               LR
   40 00000010         
   41 00000010         ;***** Insert subroutine *********************
   42 00000010         ; Insert the number into the beginning of the output arr
                       ay
   43 00000010         ;   copy all the elements of the input array to the outp
                       ut array
   44 00000010         ;Inputs : Register R0 points to input array of 16-bit un
                       signed numbers
   45 00000010         ;         Register R1 contains the length of the input a



ARM Macro Assembler    Page 2 


                       rray
   46 00000010         ;         Register R2 contains number to insert
   47 00000010         ;         Register R3 is a pointer to an empty array tha
                       t should be written into
   48 00000010         ;Outputs: The array at R3 is modified
   49 00000010         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   50 00000010         ;Error conditions: none.
   51 00000010         ;test cases
   52 00000010         ;R0=>{1,2,3,4,5,6},R1=6,R2=8,result={8,1,2,3,4,5,6}
   53 00000010         ;R0=>{1},R1=1,R2=9,,result={9,1}
   54 00000010         ;R0=>{0,0,1,2},R1=4,R2=0xFE,,result={0xFE,0,0,1,2}
   55 00000010         ;R0=>{},R1=0,R2=0x45,result={0x45}
   56 00000010         
   57 00000010                 EXPORT           Insert
   58 00000010         Insert
   59 00000010         ; put your code here
   60 00000010 B410            PUSH             {R4}
   61 00000012         ; Store the number
   62 00000012 801A            STRH             R2, [R3]
   63 00000014 F103 0302       ADD              R3, #2
   64 00000018         ; copy the rest of the array
   65 00000018         
   66 00000018 2900    Insert_Loop
                               CMP              R1, #0
   67 0000001A D007            BEQ              Insert_Done
   68 0000001C 8804            LDRH             R4, [R0]
   69 0000001E 801C            STRH             R4, [R3]
   70 00000020 F103 0302       ADD              R3, #2
   71 00000024 F100 0002       ADD              R0, #2
   72 00000028 3901            SUBS             R1, #1
   73 0000002A E7F5            B                Insert_Loop
   74 0000002C         Insert_Done
   75 0000002C BC10            POP              {R4}
   76 0000002E 4770            BX               LR
   77 00000030         
   78 00000030         ;***** Merge subroutine *********************
   79 00000030         ; Assume both arrays are initially sorted 16-bit unsigne
                       d numbers
   80 00000030         ; Merge the two input arrays into the output array
   81 00000030         ;   making the output array contain all the numbers in s
                       orted order
   82 00000030         ;Inputs : Register R0 points to the first array of 16-bi
                       t unsigned numbers
   83 00000030         ;         Register R1 points to the second array of 16-b
                       it unsigned numbers
   84 00000030         ;         Register R2 contains the number of elements in
                        the first array
   85 00000030         ;         Register R3 contains the number of elements in
                        the second array
   86 00000030         ;         Top element on the stack is a pointer to an em
                       pty output array
   87 00000030         ;Outputs: the output array is modified
   88 00000030         ;Invariables: You must not permanently modify registers 
                       R4 to R11, and LR
   89 00000030         ;Error conditions: none.
   90 00000030         ;test cases
   91 00000030         ;R0=>{0x8000},             R1=>{0x7000},             R2=
                       1,R3=1,output array={0x7000,0x8000}



ARM Macro Assembler    Page 3 


   92 00000030         ;R0=>{0x01,0x03,0x05,0x07},R1=>{0x02,0x04,0x06,0x08},R2=
                       4,R3=4,output array={0x01,0x02,0x03,0x04,0x05,0x06,0x07,
                       0x08}
   93 00000030         ;R0=>{0x01,0x02,0x03,0x04},R1=>{0x05,0x06,0x07,0x08},R2=
                       4,R3=4,output array={0x01,0x02,0x03,0x04,0x05,0x06,0x07,
                       0x08}
   94 00000030         ;R0=>{0x01,0x02},          R1=>{0x05,0x06,0x07,0x08},R2=
                       2,R3=4,output array={0x01,0x02,0x05,0x06,0x07,0x08}
   95 00000030         ;R0=>{0x01,0x02,0x03,0x04},R1=>{0x05},               R2=
                       4,R3=1,output array={0x01,0x02,0x03,0x04,0x05}
   96 00000030         ;R0=>{0x01,0x02,0x03,0x04},R1=>{},                   R2=
                       4,R3=0,output array={0x01,0x02,0x03,0x04}
   97 00000030         ;R0=>{},R1=>{},                                      R2=
                       0,R3=0,output array={} (no change to output array)
   98 00000030                 EXPORT           Merge
   99 00000030         Merge
  100 00000030         ; put your code here
  101 00000030 B570            PUSH             {R4, R5, R6, LR}
  102 00000032 9C04            LDR              R4, [SP, #16] ; R4 is the point
                                                            er to the output
  103 00000034         
  104 00000034 2A00    Merge_loop
                               CMP              R2, #0
  105 00000036 D015            BEQ              First_Empty
  106 00000038         
  107 00000038 2B00            CMP              R3, #0
  108 0000003A D01E            BEQ              Second_Empty
  109 0000003C         
  110 0000003C         ; neither one of them is empty... lets compare them and 
                       store in the output
  111 0000003C 8805            LDRH             R5, [R0]
  112 0000003E 880E            LDRH             R6, [R1]
  113 00000040 42B5            CMP              R5, R6      ; R5 - R6 ==> Neg: 
                                                            R5 > R6, Pos R5 < R
                                                            6
  114 00000042 D307            BLO              Low         ; R5 < R6 
  115 00000044         
  116 00000044 8026            STRH             R6, [R4]
  117 00000046 F104 0402       ADD              R4, #2
  118 0000004A F101 0102       ADD              R1, #2
  119 0000004E F1A3 0301       SUB              R3, #1
  120 00000052 E7EF            B                Merge_loop
  121 00000054         
  122 00000054 8025    Low     STRH             R5, [R4]    ; R6 > R5
  123 00000056 F104 0402       ADD              R4, #2
  124 0000005A F100 0002       ADD              R0, #2
  125 0000005E F1A2 0201       SUB              R2, #1
  126 00000062         
  127 00000062 E7E7            B                Merge_loop
  128 00000064         
  129 00000064         ;;High     STRH R6, [R4] 
  130 00000064         ;;   ADD R4, #2
  131 00000064         
  132 00000064         
  133 00000064         ;loop_end SUB R2, #1 
  134 00000064         ;SUB R3, #1
  135 00000064         ;ADD R0, #2
  136 00000064         ;ADD R1, #2
  137 00000064         ;B Merge_loop



ARM Macro Assembler    Page 4 


  138 00000064         
  139 00000064         First_Empty                          ;check if second is
                                                             empty as well
  140 00000064 2B00            CMP              R3, #0
  141 00000066 D010            BEQ              Both_Empty
  142 00000068         
  143 00000068         ; copy the second array to the output
  144 00000068 880E    Second_copy
                               LDRH             R6, [R1]
  145 0000006A 8026            STRH             R6, [R4]
  146 0000006C F104 0402       ADD              R4, #2
  147 00000070 F101 0102       ADD              R1, #2
  148 00000074 3B01            SUBS             R3, #1
  149 00000076 D1F7            BNE              Second_copy
  150 00000078 E007            B                Both_Empty
  151 0000007A         
  152 0000007A         Second_Empty                         ; copy the first on
                                                            e 
  153 0000007A 8805            LDRH             R5, [R0]
  154 0000007C 8025            STRH             R5, [R4]
  155 0000007E F104 0402       ADD              R4, #2
  156 00000082 F100 0002       ADD              R0, #2
  157 00000086 3A01            SUBS             R2, #1
  158 00000088 D1F7            BNE              Second_Empty
  159 0000008A         
  160 0000008A         Both_Empty                           ; some POPs here
  161 0000008A E8BD 4070       POP              {R4, R5, R6, LR}
  162 0000008E 4770            BX               LR
  163 00000090         
  164 00000090                 ALIGN
  165 00000090                 END
Command Line: --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=.\exam2.
d -o.\exam2.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\exam2.lst Exam2.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Data 00000000

Symbol: Data
   Definitions
      At line 7 in file Exam2.s
   Uses
      None
Comment: Data unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 10 in file Exam2.s
   Uses
      None
Comment: .text unused
Both_Empty 0000008A

Symbol: Both_Empty
   Definitions
      At line 160 in file Exam2.s
   Uses
      At line 141 in file Exam2.s
      At line 150 in file Exam2.s

First_Empty 00000064

Symbol: First_Empty
   Definitions
      At line 139 in file Exam2.s
   Uses
      At line 105 in file Exam2.s
Comment: First_Empty used once
Init 00000000

Symbol: Init
   Definitions
      At line 30 in file Exam2.s
   Uses
      At line 29 in file Exam2.s
Comment: Init used once
Init_Done 0000000E

Symbol: Init_Done
   Definitions
      At line 38 in file Exam2.s
   Uses
      At line 33 in file Exam2.s
Comment: Init_Done used once
Init_loop 00000000

Symbol: Init_loop
   Definitions
      At line 32 in file Exam2.s
   Uses
      At line 37 in file Exam2.s
Comment: Init_loop used once
Insert 00000010

Symbol: Insert
   Definitions
      At line 58 in file Exam2.s
   Uses
      At line 57 in file Exam2.s
Comment: Insert used once
Insert_Done 0000002C




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: Insert_Done
   Definitions
      At line 74 in file Exam2.s
   Uses
      At line 67 in file Exam2.s
Comment: Insert_Done used once
Insert_Loop 00000018

Symbol: Insert_Loop
   Definitions
      At line 66 in file Exam2.s
   Uses
      At line 73 in file Exam2.s
Comment: Insert_Loop used once
Low 00000054

Symbol: Low
   Definitions
      At line 122 in file Exam2.s
   Uses
      At line 114 in file Exam2.s
Comment: Low used once
Merge 00000030

Symbol: Merge
   Definitions
      At line 99 in file Exam2.s
   Uses
      At line 98 in file Exam2.s
Comment: Merge used once
Merge_loop 00000034

Symbol: Merge_loop
   Definitions
      At line 104 in file Exam2.s
   Uses
      At line 120 in file Exam2.s
      At line 127 in file Exam2.s

Second_Empty 0000007A

Symbol: Second_Empty
   Definitions
      At line 152 in file Exam2.s
   Uses
      At line 108 in file Exam2.s
      At line 158 in file Exam2.s

Second_copy 00000068

Symbol: Second_copy
   Definitions
      At line 144 in file Exam2.s
   Uses
      At line 149 in file Exam2.s
Comment: Second_copy used once
14 symbols
346 symbols in table
